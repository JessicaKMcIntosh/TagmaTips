" Tagma Tool Tips settings for Perl.
" vim:foldmethod=marker
" File:         autoload/TagmaTipsperl.vim
" Last Changed: Sun, Jan 1, 2012
" Maintainer:   Lorance Stinson @ Gmail ...
" Home:         https://github.com/LStinson/TagmaTips
" License:      Public Domain
"
" Description:
" Perl specific settings for the Tagma Tool Tips Plugin

" Make sure the continuation lines below do not cause problems in
" compatibility mode.
let s:cpo_save = &cpo
set cpo-=C

" TagmaTipsperl#LoadSettings -- Load the Perl Settings. {{{1
"   Loads the Perl specific settings into g:TagmaTipsSettings.
"
" Arguments:
"   None
"
" Result:
"   None
"
" Side Effects:
"   Updates g:TagmaTipsSettings.
function! TagmaTipsperl#LoadSettings()

    " Perl Primitives. {{{2
    let g:TagmaTipsSettings['perl']['prim'] = {
    \ '-X': [
    \   '    -X FILEHANDLE',
    \   '    -X EXPR',
    \   '    -X DIRHANDLE',
    \   '    -X      A file test, where X is one of the letters listed below. This',
    \   '     unary operator takes one argument, either a filename, a',
    \   '     filehandle, or a dirhandle, and tests the associated file to see',
    \   '     if something is true about it. If the argument is omitted, tests',
    \   '     $_, except for "-t", which tests STDIN. Unless otherwise',
    \   '     documented, it returns 1 for true and '''' for false, or the',
    \   '     undefined value if the file doesn''t exist. Despite the funny',
    \   '     names, precedence is the same as any other named unary operator.',
    \   '     The operator may be any of:',
    \   '',
    \   '         -r  File is readable by effective uid/gid.',
    \   '         -w  File is writable by effective uid/gid.',
    \   '         -x  File is executable by effective uid/gid.',
    \   '         -o  File is owned by effective uid.',
    \   '',
    \   '         -R  File is readable by real uid/gid.',
    \   '         -W  File is writable by real uid/gid.',
    \   '         -X  File is executable by real uid/gid.',
    \   '         -O  File is owned by real uid.',
    \   '',
    \   '         -e  File exists.',
    \   '         -z  File has zero size (is empty).',
    \   '         -s  File has nonzero size (returns size in bytes).',
    \   '',
    \   '         -f  File is a plain file.',
    \   '         -d  File is a directory.',
    \   '...',
    \ ],
    \ 'abs': [
    \   '    abs VALUE',
    \   '    abs     Returns the absolute value of its argument. If VALUE is omitted,',
    \   '     uses $_.',
    \ ],
    \ 'accept': [
    \   '    accept NEWSOCKET,GENERICSOCKET',
    \   '     Accepts an incoming socket connect, just as the accept(2) system',
    \   '     call does. Returns the packed address if it succeeded, false',
    \   '     otherwise. See the example in "Sockets: Client/Server',
    \   '     Communication" in perlipc.',
    \   '',
    \   '     On systems that support a close-on-exec flag on files, the flag',
    \   '     will be set for the newly opened file descriptor, as determined',
    \   '     by the value of $^F. See "$^F" in perlvar.',
    \ ],
    \ 'alarm': [
    \   '    alarm SECONDS',
    \   '    alarm   Arranges to have a SIGALRM delivered to this process after the',
    \   '     specified number of wallclock seconds has elapsed. If SECONDS is',
    \   '     not specified, the value stored in $_ is used. (On some',
    \   '     machines, unfortunately, the elapsed time may be up to one',
    \   '     second less or more than you specified because of how seconds',
    \   '     are counted, and process scheduling may delay the delivery of',
    \   '     the signal even further.)',
    \   '',
    \   '     Only one timer may be counting at once. Each call disables the',
    \   '     previous timer, and an argument of 0 may be supplied to cancel',
    \   '     the previous timer without starting a new one. The returned',
    \   '     value is the amount of time remaining on the previous timer.',
    \   '',
    \   '     For delays of finer granularity than one second, the Time::HiRes',
    \   '     module (from CPAN, and starting from Perl 5.8 part of the',
    \   '     standard distribution) provides ualarm(). You may also use',
    \   '     Perl''s four-argument version of select() leaving the first three',
    \   '     arguments undefined, or you might be able to use the "syscall"',
    \   '     interface to access setitimer(2) if your system supports it. See',
    \   '     perlfaq8 for details.',
    \   '',
    \   '     It is usually a mistake to intermix "alarm" and "sleep" calls.',
    \   '     ("sleep" may be internally implemented in your system with',
    \   '     "alarm")',
    \   '',
    \   '     If you want to use "alarm" to time out a system call you need to',
    \   '     use an "eval"/"die" pair. You can''t rely on the alarm causing',
    \   '     the system call to fail with $! set to "EINTR" because Perl sets',
    \   '...',
    \ ],
    \ 'atan2': [
    \   '    atan2 Y,X',
    \   '     Returns the arctangent of Y/X in the range -PI to PI.',
    \   '',
    \   '     For the tangent operation, you may use the "Math::Trig::tan"',
    \   '     function, or use the familiar relation:',
    \   '',
    \   '         sub tan { sin($_[0]) / cos($_[0])  }',
    \   '',
    \   '     The return value for "atan2(0,0)" is implementation-defined;',
    \   '     consult your atan2(3) manpage for more information.',
    \ ],
    \ 'bind': [
    \   '    bind SOCKET,NAME',
    \   '     Binds a network address to a socket, just as the bind system',
    \   '     call does. Returns true if it succeeded, false otherwise. NAME',
    \   '     should be a packed address of the appropriate type for the',
    \   '     socket. See the examples in "Sockets: Client/Server',
    \   '     Communication" in perlipc.',
    \ ],
    \ 'binmode': [
    \   '    binmode FILEHANDLE, LAYER',
    \   '    binmode FILEHANDLE',
    \   '     Arranges for FILEHANDLE to be read or written in "binary" or',
    \   '     "text" mode on systems where the run-time libraries distinguish',
    \   '     between binary and text files. If FILEHANDLE is an expression,',
    \   '     the value is taken as the name of the filehandle. Returns true',
    \   '     on success, otherwise it returns "undef" and sets $! (errno).',
    \   '',
    \   '     On some systems (in general, DOS and Windows-based systems)',
    \   '     binmode() is necessary when you''re not working with a text file.',
    \   '     For the sake of portability it is a good idea to always use it',
    \   '     when appropriate, and to never use it when it isn''t appropriate.',
    \   '     Also, people can set their I/O to be by default UTF-8 encoded',
    \   '     Unicode, not bytes.',
    \   '',
    \   '     In other words: regardless of platform, use binmode() on binary',
    \   '     data, like for example images.',
    \   '',
    \   '     If LAYER is present it is a single string, but may contain',
    \   '     multiple directives. The directives alter the behaviour of the',
    \   '     file handle. When LAYER is present using binmode on a text file',
    \   '     makes sense.',
    \   '',
    \   '     If LAYER is omitted or specified as ":raw" the filehandle is',
    \   '     made suitable for passing binary data. This includes turning off',
    \   '     possible CRLF translation and marking it as bytes (as opposed to',
    \   '     Unicode characters). Note that, despite what may be implied in',
    \   '     *"Programming Perl"* (the Camel) or elsewhere, ":raw" is *not*',
    \   '     simply the inverse of ":crlf" -- other layers which would affect',
    \   '...',
    \ ],
    \ 'bless': [
    \   '    bless REF,CLASSNAME',
    \   '    bless REF',
    \   '     This function tells the thingy referenced by REF that it is now',
    \   '     an object in the CLASSNAME package. If CLASSNAME is omitted, the',
    \   '     current package is used. Because a "bless" is often the last',
    \   '     thing in a constructor, it returns the reference for',
    \   '     convenience. Always use the two-argument version if a derived',
    \   '     class might inherit the function doing the blessing. See',
    \   '     perltoot and perlobj for more about the blessing (and blessings)',
    \   '     of objects.',
    \   '',
    \   '     Consider always blessing objects in CLASSNAMEs that are mixed',
    \   '     case. Namespaces with all lowercase names are considered',
    \   '     reserved for Perl pragmata. Builtin types have all uppercase',
    \   '     names. To prevent confusion, you may wish to avoid such package',
    \   '     names as well. Make sure that CLASSNAME is a true value.',
    \   '',
    \   '     See "Perl Modules" in perlmod.',
    \ ],
    \ 'caller': [
    \   '    caller EXPR',
    \   '    caller  Returns the context of the current subroutine call. In scalar',
    \   '     context, returns the caller''s package name if there is a caller,',
    \   '     that is, if we''re in a subroutine or "eval" or "require", and',
    \   '     the undefined value otherwise. In list context, returns',
    \   '',
    \   '         # 0         1          2',
    \   '         ($package, $filename, $line) = caller;',
    \   '',
    \   '     With EXPR, it returns some extra information that the debugger',
    \   '     uses to print a stack trace. The value of EXPR indicates how',
    \   '     many call frames to go back before the current one.',
    \   '',
    \   '         #  0         1          2      3            4',
    \   '         ($package, $filename, $line, $subroutine, $hasargs,',
    \   '',
    \   '         #  5          6          7            8       9         10',
    \   '         $wantarray, $evaltext, $is_require, $hints, $bitmask, $hinthash)',
    \   '          = caller($i);',
    \   '',
    \   '     Here $subroutine may be "(eval)" if the frame is not a',
    \   '     subroutine call, but an "eval". In such a case additional',
    \   '     elements $evaltext and $is_require are set: $is_require is true',
    \   '     if the frame is created by a "require" or "use" statement,',
    \   '     $evaltext contains the text of the "eval EXPR" statement. In',
    \   '     particular, for an "eval BLOCK" statement, $subroutine is',
    \   '     "(eval)", but $evaltext is undefined. (Note also that each "use"',
    \   '     statement creates a "require" frame inside an "eval EXPR"',
    \   '     frame.) $subroutine may also be "(unknown)" if this particular',
    \   '...',
    \ ],
    \ 'chdir': [
    \   '    chdir EXPR',
    \   '    chdir FILEHANDLE',
    \   '    chdir DIRHANDLE',
    \   '    chdir   Changes the working directory to EXPR, if possible. If EXPR is',
    \   '     omitted, changes to the directory specified by $ENV{HOME}, if',
    \   '     set; if not, changes to the directory specified by $ENV{LOGDIR}.',
    \   '     (Under VMS, the variable $ENV{SYS$LOGIN} is also checked, and',
    \   '     used if it is set.) If neither is set, "chdir" does nothing. It',
    \   '     returns true upon success, false otherwise. See the example',
    \   '     under "die".',
    \   '',
    \   '     On systems that support fchdir, you might pass a file handle or',
    \   '     directory handle as argument. On systems that don''t support',
    \   '     fchdir, passing handles produces a fatal error at run time.',
    \ ],
    \ 'chmod': [
    \   '    chmod LIST',
    \   '     Changes the permissions of a list of files. The first element of',
    \   '     the list must be the numerical mode, which should probably be an',
    \   '     octal number, and which definitely should *not* be a string of',
    \   '     octal digits: 0644 is okay, ''0644'' is not. Returns the number of',
    \   '     files successfully changed. See also "oct", if all you have is a',
    \   '     string.',
    \   '',
    \   '         $cnt = chmod 0755, ''foo'', ''bar'';',
    \   '         chmod 0755, @executables;',
    \   '         $mode = ''0644''; chmod $mode, ''foo'';      # !!! sets mode to',
    \   '                                                  # --w----r-T',
    \   '         $mode = ''0644''; chmod oct($mode), ''foo''; # this is better',
    \   '         $mode = 0644;   chmod $mode, ''foo'';      # this is best',
    \   '',
    \   '     On systems that support fchmod, you might pass file handles',
    \   '     among the files. On systems that don''t support fchmod, passing',
    \   '     file handles produces a fatal error at run time. The file',
    \   '     handles must be passed as globs or references to be recognized.',
    \   '     Barewords are considered file names.',
    \   '',
    \   '         open(my $fh, "<", "foo");',
    \   '         my $perm = (stat $fh)[2] & 07777;',
    \   '         chmod($perm | 0600, $fh);',
    \   '',
    \   '     You can also import the symbolic "S_I*" constants from the Fcntl',
    \   '     module:',
    \   '',
    \   '         use Fcntl '':mode'';',
    \   '...',
    \ ],
    \ 'chomp': [
    \   '    chomp VARIABLE',
    \   '    chomp( LIST )',
    \   '    chomp   This safer version of "chop" removes any trailing string that',
    \   '     corresponds to the current value of $/ (also known as',
    \   '     $INPUT_RECORD_SEPARATOR in the "English" module). It returns the',
    \   '     total number of characters removed from all its arguments. It''s',
    \   '     often used to remove the newline from the end of an input record',
    \   '     when you''re worried that the final record may be missing its',
    \   '     newline. When in paragraph mode ("$/ = """), it removes all',
    \   '     trailing newlines from the string. When in slurp mode ("$/ =',
    \   '     undef") or fixed-length record mode ($/ is a reference to an',
    \   '     integer or the like, see perlvar) chomp() won''t remove anything.',
    \   '     If VARIABLE is omitted, it chomps $_. Example:',
    \   '',
    \   '         while (<>) {',
    \   '             chomp;  # avoid \n on last field',
    \   '             @array = split(/:/);',
    \   '             # ...',
    \   '         }',
    \   '',
    \   '     If VARIABLE is a hash, it chomps the hash''s values, but not its',
    \   '     keys.',
    \   '',
    \   '     You can actually chomp anything that''s an lvalue, including an',
    \   '     assignment:',
    \   '',
    \   '         chomp($cwd = `pwd`);',
    \   '         chomp($answer = <STDIN>);',
    \   '...',
    \ ],
    \ 'chop': [
    \   '    chop VARIABLE',
    \   '    chop( LIST )',
    \   '    chop    Chops off the last character of a string and returns the',
    \   '     character chopped. It is much more efficient than "s/.$//s"',
    \   '     because it neither scans nor copies the string. If VARIABLE is',
    \   '     omitted, chops $_. If VARIABLE is a hash, it chops the hash''s',
    \   '     values, but not its keys.',
    \   '',
    \   '     You can actually chop anything that''s an lvalue, including an',
    \   '     assignment.',
    \   '',
    \   '     If you chop a list, each element is chopped. Only the value of',
    \   '     the last "chop" is returned.',
    \   '',
    \   '     Note that "chop" returns the last character. To return all but',
    \   '     the last character, use "substr($string, 0, -1)".',
    \   '',
    \   '     See also "chomp".',
    \ ],
    \ 'chown': [
    \   '    chown LIST',
    \   '     Changes the owner (and group) of a list of files. The first two',
    \   '     elements of the list must be the *numeric* uid and gid, in that',
    \   '     order. A value of -1 in either position is interpreted by most',
    \   '     systems to leave that value unchanged. Returns the number of',
    \   '     files successfully changed.',
    \   '',
    \   '         $cnt = chown $uid, $gid, ''foo'', ''bar'';',
    \   '         chown $uid, $gid, @filenames;',
    \   '',
    \   '     On systems that support fchown, you might pass file handles',
    \   '     among the files. On systems that don''t support fchown, passing',
    \   '     file handles produces a fatal error at run time. The file',
    \   '     handles must be passed as globs or references to be recognized.',
    \   '     Barewords are considered file names.',
    \   '',
    \   '     Here''s an example that looks up nonnumeric uids in the passwd',
    \   '     file:',
    \   '',
    \   '         print "User: ";',
    \   '         chomp($user = <STDIN>);',
    \   '         print "Files: ";',
    \   '         chomp($pattern = <STDIN>);',
    \   '',
    \   '         ($login,$pass,$uid,$gid) = getpwnam($user)',
    \   '             or die "$user not in passwd file";',
    \   '',
    \   '         @ary = glob($pattern);      # expand filenames',
    \   '         chown $uid, $gid, @ary;',
    \   '...',
    \ ],
    \ 'chr': [
    \   '    chr NUMBER',
    \   '    chr     Returns the character represented by that NUMBER in the',
    \   '     character set. For example, "chr(65)" is "A" in either ASCII or',
    \   '     Unicode, and chr(0x263a) is a Unicode smiley face.',
    \   '',
    \   '     Negative values give the Unicode replacement character',
    \   '     (chr(0xfffd)), except under the bytes pragma, where low eight',
    \   '     bits of the value (truncated to an integer) are used.',
    \   '',
    \   '     If NUMBER is omitted, uses $_.',
    \   '',
    \   '     For the reverse, use "ord".',
    \   '',
    \   '     Note that characters from 128 to 255 (inclusive) are by default',
    \   '     internally not encoded as UTF-8 for backward compatibility',
    \   '     reasons.',
    \   '',
    \   '     See perlunicode for more about Unicode.',
    \ ],
    \ 'chroot': [
    \   '    chroot FILENAME',
    \   '    chroot  This function works like the system call by the same name: it',
    \   '     makes the named directory the new root directory for all further',
    \   '     pathnames that begin with a "/" by your process and all its',
    \   '     children. (It doesn''t change your current working directory,',
    \   '     which is unaffected.) For security reasons, this call is',
    \   '     restricted to the superuser. If FILENAME is omitted, does a',
    \   '     "chroot" to $_.',
    \ ],
    \ 'close': [
    \   '    close FILEHANDLE',
    \   '    close   Closes the file or pipe associated with the file handle, flushes',
    \   '     the IO buffers, and closes the system file descriptor. Returns',
    \   '     true if those operations have succeeded and if no error was',
    \   '     reported by any PerlIO layer. Closes the currently selected',
    \   '     filehandle if the argument is omitted.',
    \   '',
    \   '     You don''t have to close FILEHANDLE if you are immediately going',
    \   '     to do another "open" on it, because "open" will close it for',
    \   '     you. (See "open".) However, an explicit "close" on an input file',
    \   '     resets the line counter ($.), while the implicit close done by',
    \   '     "open" does not.',
    \   '',
    \   '     If the file handle came from a piped open, "close" will',
    \   '     additionally return false if one of the other system calls',
    \   '     involved fails, or if the program exits with non-zero status.',
    \   '     (If the only problem was that the program exited non-zero, $!',
    \   '     will be set to 0.) Closing a pipe also waits for the process',
    \   '     executing on the pipe to complete, in case you want to look at',
    \   '     the output of the pipe afterwards, and implicitly puts the exit',
    \   '     status value of that command into $? and',
    \   '     "${^CHILD_ERROR_NATIVE}".',
    \   '',
    \   '     Prematurely closing the read end of a pipe (i.e. before the',
    \   '     process writing to it at the other end has closed it) will',
    \   '     result in a SIGPIPE being delivered to the writer. If the other',
    \   '     end can''t handle that, be sure to read all the data before',
    \   '     closing the pipe.',
    \   '...',
    \ ],
    \ 'closedir': [
    \   '    closedir DIRHANDLE',
    \   '     Closes a directory opened by "opendir" and returns the success',
    \   '     of that system call.',
    \ ],
    \ 'connect': [
    \   '    connect SOCKET,NAME',
    \   '     Attempts to connect to a remote socket, just as the connect',
    \   '     system call does. Returns true if it succeeded, false otherwise.',
    \   '     NAME should be a packed address of the appropriate type for the',
    \   '     socket. See the examples in "Sockets: Client/Server',
    \   '     Communication" in perlipc.',
    \ ],
    \ 'continue': [
    \   '    continue BLOCK',
    \   '    continue',
    \   '     "continue" is actually a flow control statement rather than a',
    \   '     function. If there is a "continue" BLOCK attached to a BLOCK',
    \   '     (typically in a "while" or "foreach"), it is always executed',
    \   '     just before the conditional is about to be evaluated again, just',
    \   '     like the third part of a "for" loop in C. Thus it can be used to',
    \   '     increment a loop variable, even when the loop has been continued',
    \   '     via the "next" statement (which is similar to the C "continue"',
    \   '     statement).',
    \   '',
    \   '     "last", "next", or "redo" may appear within a "continue" block.',
    \   '     "last" and "redo" will behave as if they had been executed',
    \   '     within the main block. So will "next", but since it will execute',
    \   '     a "continue" block, it may be more entertaining.',
    \   '',
    \   '         while (EXPR) {',
    \   '             ### redo always comes here',
    \   '             do_something;',
    \   '         } continue {',
    \   '             ### next always comes here',
    \   '             do_something_else;',
    \   '             # then back the top to re-check EXPR',
    \   '         }',
    \   '         ### last always comes here',
    \   '',
    \   '     Omitting the "continue" section is semantically equivalent to',
    \   '     using an empty one, logically enough. In that case, "next" goes',
    \   '     directly back to check the condition at the top of the loop.',
    \   '...',
    \ ],
    \ 'cos': [
    \   '    cos EXPR',
    \   '    cos     Returns the cosine of EXPR (expressed in radians). If EXPR is',
    \   '     omitted, takes cosine of $_.',
    \   '',
    \   '     For the inverse cosine operation, you may use the',
    \   '     "Math::Trig::acos()" function, or use this relation:',
    \   '',
    \   '         sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }',
    \ ],
    \ 'crypt': [
    \   '    crypt PLAINTEXT,SALT',
    \   '     Creates a digest string exactly like the crypt(3) function in',
    \   '     the C library (assuming that you actually have a version there',
    \   '     that has not been extirpated as a potential munition).',
    \   '',
    \   '     crypt() is a one-way hash function. The PLAINTEXT and SALT is',
    \   '     turned into a short string, called a digest, which is returned.',
    \   '     The same PLAINTEXT and SALT will always return the same string,',
    \   '     but there is no (known) way to get the original PLAINTEXT from',
    \   '     the hash. Small changes in the PLAINTEXT or SALT will result in',
    \   '     large changes in the digest.',
    \   '',
    \   '     There is no decrypt function. This function isn''t all that',
    \   '     useful for cryptography (for that, look for Crypt modules on',
    \   '     your nearby CPAN mirror) and the name "crypt" is a bit of a',
    \   '     misnomer. Instead it is primarily used to check if two pieces of',
    \   '     text are the same without having to transmit or store the text',
    \   '     itself. An example is checking if a correct password is given.',
    \   '     The digest of the password is stored, not the password itself.',
    \   '     The user types in a password that is crypt()''d with the same',
    \   '     salt as the stored digest. If the two digests match the password',
    \   '     is correct.',
    \   '',
    \   '     When verifying an existing digest string you should use the',
    \   '     digest as the salt (like "crypt($plain, $digest) eq $digest").',
    \   '     The SALT used to create the digest is visible as part of the',
    \   '     digest. This ensures crypt() will hash the new string with the',
    \   '     same salt as the digest. This allows your code to work with the',
    \   '     standard crypt and with more exotic implementations. In other',
    \   '...',
    \ ],
    \ 'dbmclose': [
    \   '    dbmclose HASH',
    \   '     [This function has been largely superseded by the "untie"',
    \   '     function.]',
    \   '',
    \   '     Breaks the binding between a DBM file and a hash.',
    \ ],
    \ 'dbmopen': [
    \   '    dbmopen HASH,DBNAME,MASK',
    \   '     [This function has been largely superseded by the "tie"',
    \   '     function.]',
    \   '',
    \   '     This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB',
    \   '     file to a hash. HASH is the name of the hash. (Unlike normal',
    \   '     "open", the first argument is *not* a filehandle, even though it',
    \   '     looks like one). DBNAME is the name of the database (without the',
    \   '     .dir or .pag extension if any). If the database does not exist,',
    \   '     it is created with protection specified by MASK (as modified by',
    \   '     the "umask"). If your system supports only the older DBM',
    \   '     functions, you may perform only one "dbmopen" in your program.',
    \   '     In older versions of Perl, if your system had neither DBM nor',
    \   '     ndbm, calling "dbmopen" produced a fatal error; it now falls',
    \   '     back to sdbm(3).',
    \   '',
    \   '     If you don''t have write access to the DBM file, you can only',
    \   '     read hash variables, not set them. If you want to test whether',
    \   '     you can write, either use file tests or try setting a dummy hash',
    \   '     entry inside an "eval", which will trap the error.',
    \   '',
    \   '     Note that functions such as "keys" and "values" may return huge',
    \   '     lists when used on large DBM files. You may prefer to use the',
    \   '     "each" function to iterate over large DBM files. Example:',
    \   '',
    \   '         # print out history file offsets',
    \   '         dbmopen(%HIST,''/usr/lib/news/history'',0666);',
    \   '         while (($key,$val) = each %HIST) {',
    \   '             print $key, '' = '', unpack(''L'',$val), "\n";',
    \   '...',
    \ ],
    \ 'defined': [
    \   '    defined EXPR',
    \   '    defined Returns a Boolean value telling whether EXPR has a value other',
    \   '     than the undefined value "undef". If EXPR is not present, $_',
    \   '     will be checked.',
    \   '',
    \   '     Many operations return "undef" to indicate failure, end of file,',
    \   '     system error, uninitialized variable, and other exceptional',
    \   '     conditions. This function allows you to distinguish "undef" from',
    \   '     other values. (A simple Boolean test will not distinguish among',
    \   '     "undef", zero, the empty string, and "0", which are all equally',
    \   '     false.) Note that since "undef" is a valid scalar, its presence',
    \   '     doesn''t *necessarily* indicate an exceptional condition: "pop"',
    \   '     returns "undef" when its argument is an empty array, *or* when',
    \   '     the element to return happens to be "undef".',
    \   '',
    \   '     You may also use "defined(&func)" to check whether subroutine',
    \   '     &func has ever been defined. The return value is unaffected by',
    \   '     any forward declarations of &func. Note that a subroutine which',
    \   '     is not defined may still be callable: its package may have an',
    \   '     "AUTOLOAD" method that makes it spring into existence the first',
    \   '     time that it is called -- see perlsub.',
    \   '',
    \   '     Use of "defined" on aggregates (hashes and arrays) is',
    \   '     deprecated. It used to report whether memory for that aggregate',
    \   '     has ever been allocated. This behavior may disappear in future',
    \   '     versions of Perl. You should instead use a simple test for size:',
    \   '',
    \   '         if (@an_array) { print "has array elements\n" }',
    \   '         if (%a_hash)   { print "has hash members\n"   }',
    \   '...',
    \ ],
    \ 'delete': [
    \   '    delete EXPR',
    \   '     Given an expression that specifies a hash element, array',
    \   '     element, hash slice, or array slice, deletes the specified',
    \   '     element(s) from the hash or array. In the case of an array, if',
    \   '     the array elements happen to be at the end, the size of the',
    \   '     array will shrink to the highest element that tests true for',
    \   '     exists() (or 0 if no such element exists).',
    \   '',
    \   '     Returns a list with the same number of elements as the number of',
    \   '     elements for which deletion was attempted. Each element of that',
    \   '     list consists of either the value of the element deleted, or the',
    \   '     undefined value. In scalar context, this means that you get the',
    \   '     value of the last element deleted (or the undefined value if',
    \   '     that element did not exist).',
    \   '',
    \   '         %hash = (foo => 11, bar => 22, baz => 33);',
    \   '         $scalar = delete $hash{foo};             # $scalar is 11',
    \   '         $scalar = delete @hash{qw(foo bar)};     # $scalar is 22',
    \   '         @array  = delete @hash{qw(foo bar baz)}; # @array  is (undef,undef,33)',
    \   '',
    \   '     Deleting from %ENV modifies the environment. Deleting from a',
    \   '     hash tied to a DBM file deletes the entry from the DBM file.',
    \   '     Deleting from a "tie"d hash or array may not necessarily return',
    \   '     anything.',
    \   '',
    \   '     Deleting an array element effectively returns that position of',
    \   '     the array to its initial, uninitialized state. Subsequently',
    \   '     testing for the same element with exists() will return false.',
    \   '     Also, deleting array elements in the middle of an array will not',
    \   '...',
    \ ],
    \ 'die': [
    \   '    die LIST',
    \   '     Outside an "eval", prints the value of LIST to "STDERR" and',
    \   '     exits with the current value of $! (errno). If $! is 0, exits',
    \   '     with the value of "($? >> 8)" (backtick `command` status). If',
    \   '     "($? >> 8)" is 0, exits with 255. Inside an "eval()," the error',
    \   '     message is stuffed into $@ and the "eval" is terminated with the',
    \   '     undefined value. This makes "die" the way to raise an exception.',
    \   '',
    \   '     Equivalent examples:',
    \   '',
    \   '         die "Can''t cd to spool: $!\n" unless chdir ''/usr/spool/news'';',
    \   '         chdir ''/usr/spool/news'' or die "Can''t cd to spool: $!\n"',
    \   '',
    \   '     If the last element of LIST does not end in a newline, the',
    \   '     current script line number and input line number (if any) are',
    \   '     also printed, and a newline is supplied. Note that the "input',
    \   '     line number" (also known as "chunk") is subject to whatever',
    \   '     notion of "line" happens to be currently in effect, and is also',
    \   '     available as the special variable $.. See "$/" in perlvar and',
    \   '     "$." in perlvar.',
    \   '',
    \   '     Hint: sometimes appending ", stopped" to your message will cause',
    \   '     it to make better sense when the string "at foo line 123" is',
    \   '     appended. Suppose you are running script "canasta".',
    \   '',
    \   '         die "/etc/games is no good";',
    \   '         die "/etc/games is no good, stopped";',
    \   '',
    \   '     produce, respectively',
    \   '...',
    \ ],
    \ 'do': [
    \   '    do BLOCK',
    \   '     Not really a function. Returns the value of the last command in',
    \   '     the sequence of commands indicated by BLOCK. When modified by',
    \   '     the "while" or "until" loop modifier, executes the BLOCK once',
    \   '     before testing the loop condition. (On other statements the loop',
    \   '     modifiers test the conditional first.)',
    \   '',
    \   '     "do BLOCK" does *not* count as a loop, so the loop control',
    \   '     statements "next", "last", or "redo" cannot be used to leave or',
    \   '     restart the block. See perlsyn for alternative strategies.',
    \   '',
    \   '    do SUBROUTINE(LIST)',
    \   '     This form of subroutine call is deprecated. See perlsub.',
    \   '',
    \   '    do EXPR Uses the value of EXPR as a filename and executes the contents',
    \   '     of the file as a Perl script.',
    \   '',
    \   '         do ''stat.pl'';',
    \   '',
    \   '     is just like',
    \   '',
    \   '         eval `cat stat.pl`;',
    \   '',
    \   '     except that it''s more efficient and concise, keeps track of the',
    \   '     current filename for error messages, searches the @INC',
    \   '     directories, and updates %INC if the file is found. See',
    \   '     "Predefined Names" in perlvar for these variables. It also',
    \   '     differs in that code evaluated with "do FILENAME" cannot see',
    \   '     lexicals in the enclosing scope; "eval STRING" does. It''s the',
    \   '...',
    \ ],
    \ 'dump': [
    \   '    dump LABEL',
    \   '    dump    This function causes an immediate core dump. See also the -u',
    \   '     command-line switch in perlrun, which does the same thing.',
    \   '     Primarily this is so that you can use the undump program (not',
    \   '     supplied) to turn your core dump into an executable binary after',
    \   '     having initialized all your variables at the beginning of the',
    \   '     program. When the new binary is executed it will begin by',
    \   '     executing a "goto LABEL" (with all the restrictions that "goto"',
    \   '     suffers). Think of it as a goto with an intervening core dump',
    \   '     and reincarnation. If "LABEL" is omitted, restarts the program',
    \   '     from the top.',
    \   '',
    \   '     WARNING: Any files opened at the time of the dump will *not* be',
    \   '     open any more when the program is reincarnated, with possible',
    \   '     resulting confusion on the part of Perl.',
    \   '',
    \   '     This function is now largely obsolete, mostly because it''s very',
    \   '     hard to convert a core file into an executable. That''s why you',
    \   '     should now invoke it as "CORE::dump()", if you don''t want to be',
    \   '     warned against a possible typo.',
    \ ],
    \ 'each': [
    \   '    each HASH',
    \   '     When called in list context, returns a 2-element list consisting',
    \   '     of the key and value for the next element of a hash, so that you',
    \   '     can iterate over it. When called in scalar context, returns only',
    \   '     the key for the next element in the hash.',
    \   '',
    \   '     Entries are returned in an apparently random order. The actual',
    \   '     random order is subject to change in future versions of perl,',
    \   '     but it is guaranteed to be in the same order as either the',
    \   '     "keys" or "values" function would produce on the same',
    \   '     (unmodified) hash. Since Perl 5.8.2 the ordering can be',
    \   '     different even between different runs of Perl for security',
    \   '     reasons (see "Algorithmic Complexity Attacks" in perlsec).',
    \   '',
    \   '     When the hash is entirely read, a null array is returned in list',
    \   '     context (which when assigned produces a false (0) value), and',
    \   '     "undef" in scalar context. The next call to "each" after that',
    \   '     will start iterating again. There is a single iterator for each',
    \   '     hash, shared by all "each", "keys", and "values" function calls',
    \   '     in the program; it can be reset by reading all the elements from',
    \   '     the hash, or by evaluating "keys HASH" or "values HASH". If you',
    \   '     add or delete elements of a hash while you''re iterating over it,',
    \   '     you may get entries skipped or duplicated, so don''t. Exception:',
    \   '     It is always safe to delete the item most recently returned by',
    \   '     "each()", which means that the following code will work:',
    \   '',
    \   '             while (($key, $value) = each %hash) {',
    \   '               print $key, "\n";',
    \   '               delete $hash{$key};   # This is safe',
    \   '...',
    \ ],
    \ 'endgrent': [
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '',
    \   '     In scalar context, you get the name, unless the function was a',
    \   '...',
    \ ],
    \ 'endhostent': [
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '',
    \   '     In scalar context, you get the name, unless the function was a',
    \   '     lookup by name, in which case you get the other thing, whatever',
    \   '...',
    \ ],
    \ 'endnetent': [
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '',
    \   '     In scalar context, you get the name, unless the function was a',
    \   '     lookup by name, in which case you get the other thing, whatever',
    \   '     it is. (If the entry doesn''t exist you get the undefined value.)',
    \   '...',
    \ ],
    \ 'endprotoent': [
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '',
    \   '     In scalar context, you get the name, unless the function was a',
    \   '     lookup by name, in which case you get the other thing, whatever',
    \   '     it is. (If the entry doesn''t exist you get the undefined value.)',
    \   '     For example:',
    \   '...',
    \ ],
    \ 'endpwent': [
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '...',
    \ ],
    \ 'endservent': [
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '',
    \   '     In scalar context, you get the name, unless the function was a',
    \   '     lookup by name, in which case you get the other thing, whatever',
    \   '     it is. (If the entry doesn''t exist you get the undefined value.)',
    \   '     For example:',
    \   '...',
    \ ],
    \ 'eof': [
    \   '    eof FILEHANDLE',
    \   '    eof ()',
    \   '    eof     Returns 1 if the next read on FILEHANDLE will return end of',
    \   '     file, or if FILEHANDLE is not open. FILEHANDLE may be an',
    \   '     expression whose value gives the real filehandle. (Note that',
    \   '     this function actually reads a character and then "ungetc"s it,',
    \   '     so isn''t very useful in an interactive context.) Do not read',
    \   '     from a terminal file (or call "eof(FILEHANDLE)" on it) after',
    \   '     end-of-file is reached. File types such as terminals may lose',
    \   '     the end-of-file condition if you do.',
    \   '',
    \   '     An "eof" without an argument uses the last file read. Using',
    \   '     "eof()" with empty parentheses is very different. It refers to',
    \   '     the pseudo file formed from the files listed on the command line',
    \   '     and accessed via the "<>" operator. Since "<>" isn''t explicitly',
    \   '     opened, as a normal filehandle is, an "eof()" before "<>" has',
    \   '     been used will cause @ARGV to be examined to determine if input',
    \   '     is available. Similarly, an "eof()" after "<>" has returned',
    \   '     end-of-file will assume you are processing another @ARGV list,',
    \   '     and if you haven''t set @ARGV, will read input from "STDIN"; see',
    \   '     "I/O Operators" in perlop.',
    \   '',
    \   '     In a "while (<>)" loop, "eof" or "eof(ARGV)" can be used to',
    \   '     detect the end of each file, "eof()" will only detect the end of',
    \   '     the last file. Examples:',
    \   '',
    \   '         # reset line numbering on each input file',
    \   '         while (<>) {',
    \   '             next if /^\s*#/;        # skip comments',
    \   '...',
    \ ],
    \ 'eval': [
    \   '    eval EXPR',
    \   '    eval BLOCK',
    \   '    eval    In the first form, the return value of EXPR is parsed and',
    \   '     executed as if it were a little Perl program. The value of the',
    \   '     expression (which is itself determined within scalar context) is',
    \   '     first parsed, and if there weren''t any errors, executed in the',
    \   '     lexical context of the current Perl program, so that any',
    \   '     variable settings or subroutine and format definitions remain',
    \   '     afterwards. Note that the value is parsed every time the "eval"',
    \   '     executes. If EXPR is omitted, evaluates $_. This form is',
    \   '     typically used to delay parsing and subsequent execution of the',
    \   '     text of EXPR until run time.',
    \   '',
    \   '     In the second form, the code within the BLOCK is parsed only',
    \   '     once--at the same time the code surrounding the "eval" itself',
    \   '     was parsed--and executed within the context of the current Perl',
    \   '     program. This form is typically used to trap exceptions more',
    \   '     efficiently than the first (see below), while also providing the',
    \   '     benefit of checking the code within BLOCK at compile time.',
    \   '',
    \   '     The final semicolon, if any, may be omitted from the value of',
    \   '     EXPR or within the BLOCK.',
    \   '',
    \   '     In both forms, the value returned is the value of the last',
    \   '     expression evaluated inside the mini-program; a return statement',
    \   '     may be also used, just as with subroutines. The expression',
    \   '     providing the return value is evaluated in void, scalar, or list',
    \   '     context, depending on the context of the "eval" itself. See',
    \   '     "wantarray" for more on how the evaluation context can be',
    \   '...',
    \ ],
    \ 'exec': [
    \   '    exec LIST',
    \   '    exec PROGRAM LIST',
    \   '     The "exec" function executes a system command *and never',
    \   '     returns*-- use "system" instead of "exec" if you want it to',
    \   '     return. It fails and returns false only if the command does not',
    \   '     exist *and* it is executed directly instead of via your system''s',
    \   '     command shell (see below).',
    \   '',
    \   '     Since it''s a common mistake to use "exec" instead of "system",',
    \   '     Perl warns you if there is a following statement which isn''t',
    \   '     "die", "warn", or "exit" (if "-w" is set - but you always do',
    \   '     that). If you *really* want to follow an "exec" with some other',
    \   '     statement, you can use one of these styles to avoid the warning:',
    \   '',
    \   '         exec (''foo'')   or print STDERR "couldn''t exec foo: $!";',
    \   '         { exec (''foo'') }; print STDERR "couldn''t exec foo: $!";',
    \   '',
    \   '     If there is more than one argument in LIST, or if LIST is an',
    \   '     array with more than one value, calls execvp(3) with the',
    \   '     arguments in LIST. If there is only one scalar argument or an',
    \   '     array with one element in it, the argument is checked for shell',
    \   '     metacharacters, and if there are any, the entire argument is',
    \   '     passed to the system''s command shell for parsing (this is',
    \   '     "/bin/sh -c" on Unix platforms, but varies on other platforms).',
    \   '     If there are no shell metacharacters in the argument, it is',
    \   '     split into words and passed directly to "execvp", which is more',
    \   '     efficient. Examples:',
    \   '',
    \   '         exec ''/bin/echo'', ''Your arguments are: '', @ARGV;',
    \   '...',
    \ ],
    \ 'exists': [
    \   '    exists EXPR',
    \   '     Given an expression that specifies a hash element or array',
    \   '     element, returns true if the specified element in the hash or',
    \   '     array has ever been initialized, even if the corresponding value',
    \   '     is undefined.',
    \   '',
    \   '         print "Exists\n"    if exists $hash{$key};',
    \   '         print "Defined\n"   if defined $hash{$key};',
    \   '         print "True\n"      if $hash{$key};',
    \   '',
    \   '         print "Exists\n"    if exists $array[$index];',
    \   '         print "Defined\n"   if defined $array[$index];',
    \   '         print "True\n"      if $array[$index];',
    \   '',
    \   '     A hash or array element can be true only if it''s defined, and',
    \   '     defined if it exists, but the reverse doesn''t necessarily hold',
    \   '     true.',
    \   '',
    \   '     Given an expression that specifies the name of a subroutine,',
    \   '     returns true if the specified subroutine has ever been declared,',
    \   '     even if it is undefined. Mentioning a subroutine name for exists',
    \   '     or defined does not count as declaring it. Note that a',
    \   '     subroutine which does not exist may still be callable: its',
    \   '     package may have an "AUTOLOAD" method that makes it spring into',
    \   '     existence the first time that it is called -- see perlsub.',
    \   '',
    \   '         print "Exists\n"    if exists &subroutine;',
    \   '         print "Defined\n"   if defined &subroutine;',
    \   '...',
    \ ],
    \ 'exit': [
    \   '    exit EXPR',
    \   '    exit    Evaluates EXPR and exits immediately with that value. Example:',
    \   '',
    \   '         $ans = <STDIN>;',
    \   '         exit 0 if $ans =~ /^[Xx]/;',
    \   '',
    \   '     See also "die". If EXPR is omitted, exits with 0 status. The',
    \   '     only universally recognized values for EXPR are 0 for success',
    \   '     and 1 for error; other values are subject to interpretation',
    \   '     depending on the environment in which the Perl program is',
    \   '     running. For example, exiting 69 (EX_UNAVAILABLE) from a',
    \   '     *sendmail* incoming-mail filter will cause the mailer to return',
    \   '     the item undelivered, but that''s not true everywhere.',
    \   '',
    \   '     Don''t use "exit" to abort a subroutine if there''s any chance',
    \   '     that someone might want to trap whatever error happened. Use',
    \   '     "die" instead, which can be trapped by an "eval".',
    \   '',
    \   '     The exit() function does not always exit immediately. It calls',
    \   '     any defined "END" routines first, but these "END" routines may',
    \   '     not themselves abort the exit. Likewise any object destructors',
    \   '     that need to be called are called before the real exit. If this',
    \   '     is a problem, you can call "POSIX:_exit($status)" to avoid END',
    \   '     and destructor processing. See perlmod for details.',
    \ ],
    \ 'exp': [
    \   '    exp EXPR',
    \   '    exp     Returns *e* (the natural logarithm base) to the power of EXPR.',
    \   '     If EXPR is omitted, gives "exp($_)".',
    \ ],
    \ 'fcntl': [
    \   '    fcntl FILEHANDLE,FUNCTION,SCALAR',
    \   '     Implements the fcntl(2) function. You''ll probably have to say',
    \   '',
    \   '         use Fcntl;',
    \   '',
    \   '     first to get the correct constant definitions. Argument',
    \   '     processing and value return works just like "ioctl" below. For',
    \   '     example:',
    \   '',
    \   '         use Fcntl;',
    \   '         fcntl($filehandle, F_GETFL, $packed_return_buffer)',
    \   '             or die "can''t fcntl F_GETFL: $!";',
    \   '',
    \   '     You don''t have to check for "defined" on the return from',
    \   '     "fcntl". Like "ioctl", it maps a 0 return from the system call',
    \   '     into "0 but true" in Perl. This string is true in boolean',
    \   '     context and 0 in numeric context. It is also exempt from the',
    \   '     normal -w warnings on improper numeric conversions.',
    \   '',
    \   '     Note that "fcntl" will produce a fatal error if used on a',
    \   '     machine that doesn''t implement fcntl(2). See the Fcntl module or',
    \   '     your fcntl(2) manpage to learn what functions are available on',
    \   '     your system.',
    \   '',
    \   '     Here''s an example of setting a filehandle named "REMOTE" to be',
    \   '     non-blocking at the system level. You''ll have to negotiate $| on',
    \   '     your own, though.',
    \   '',
    \   '         use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);',
    \   '...',
    \ ],
    \ 'fileno': [
    \   '    fileno FILEHANDLE',
    \   '     Returns the file descriptor for a filehandle, or undefined if',
    \   '     the filehandle is not open. This is mainly useful for',
    \   '     constructing bitmaps for "select" and low-level POSIX',
    \   '     tty-handling operations. If FILEHANDLE is an expression, the',
    \   '     value is taken as an indirect filehandle, generally its name.',
    \   '',
    \   '     You can use this to find out whether two handles refer to the',
    \   '     same underlying descriptor:',
    \   '',
    \   '         if (fileno(THIS) == fileno(THAT)) {',
    \   '             print "THIS and THAT are dups\n";',
    \   '         }',
    \   '',
    \   '     (Filehandles connected to memory objects via new features of',
    \   '     "open" may return undefined even though they are open.)',
    \ ],
    \ 'flock': [
    \   '    flock FILEHANDLE,OPERATION',
    \   '     Calls flock(2), or an emulation of it, on FILEHANDLE. Returns',
    \   '     true for success, false on failure. Produces a fatal error if',
    \   '     used on a machine that doesn''t implement flock(2), fcntl(2)',
    \   '     locking, or lockf(3). "flock" is Perl''s portable file locking',
    \   '     interface, although it locks only entire files, not records.',
    \   '',
    \   '     Two potentially non-obvious but traditional "flock" semantics',
    \   '     are that it waits indefinitely until the lock is granted, and',
    \   '     that its locks merely advisory. Such discretionary locks are',
    \   '     more flexible, but offer fewer guarantees. This means that',
    \   '     programs that do not also use "flock" may modify files locked',
    \   '     with "flock". See perlport, your port''s specific documentation,',
    \   '     or your system-specific local manpages for details. It''s best to',
    \   '     assume traditional behavior if you''re writing portable programs.',
    \   '     (But if you''re not, you should as always feel perfectly free to',
    \   '     write for your own system''s idiosyncrasies (sometimes called',
    \   '     "features"). Slavish adherence to portability concerns shouldn''t',
    \   '     get in the way of your getting your job done.)',
    \   '',
    \   '     OPERATION is one of LOCK_SH, LOCK_EX, or LOCK_UN, possibly',
    \   '     combined with LOCK_NB. These constants are traditionally valued',
    \   '     1, 2, 8 and 4, but you can use the symbolic names if you import',
    \   '     them from the Fcntl module, either individually, or as a group',
    \   '     using the '':flock'' tag. LOCK_SH requests a shared lock, LOCK_EX',
    \   '     requests an exclusive lock, and LOCK_UN releases a previously',
    \   '     requested lock. If LOCK_NB is bitwise-or''ed with LOCK_SH or',
    \   '     LOCK_EX then "flock" will return immediately rather than',
    \   '     blocking waiting for the lock (check the return status to see if',
    \   '...',
    \ ],
    \ 'fork': [
    \   '    fork    Does a fork(2) system call to create a new process running the',
    \   '     same program at the same point. It returns the child pid to the',
    \   '     parent process, 0 to the child process, or "undef" if the fork',
    \   '     is unsuccessful. File descriptors (and sometimes locks on those',
    \   '     descriptors) are shared, while everything else is copied. On',
    \   '     most systems supporting fork(), great care has gone into making',
    \   '     it extremely efficient (for example, using copy-on-write',
    \   '     technology on data pages), making it the dominant paradigm for',
    \   '     multitasking over the last few decades.',
    \   '',
    \   '     Beginning with v5.6.0, Perl will attempt to flush all files',
    \   '     opened for output before forking the child process, but this may',
    \   '     not be supported on some platforms (see perlport). To be safe,',
    \   '     you may need to set $| ($AUTOFLUSH in English) or call the',
    \   '     "autoflush()" method of "IO::Handle" on any open handles in',
    \   '     order to avoid duplicate output.',
    \   '',
    \   '     If you "fork" without ever waiting on your children, you will',
    \   '     accumulate zombies. On some systems, you can avoid this by',
    \   '     setting $SIG{CHLD} to "IGNORE". See also perlipc for more',
    \   '     examples of forking and reaping moribund children.',
    \   '',
    \   '     Note that if your forked child inherits system file descriptors',
    \   '     like STDIN and STDOUT that are actually connected by a pipe or',
    \   '     socket, even if you exit, then the remote server (such as, say,',
    \   '     a CGI script or a backgrounded job launched from a remote shell)',
    \   '     won''t think you''re done. You should reopen those to /dev/null if',
    \   '     it''s any issue.',
    \ ],
    \ 'format': [
    \   '    format  Declare a picture format for use by the "write" function. For',
    \   '     example:',
    \   '',
    \   '         format Something =',
    \   '             Test: @<<<<<<<< @||||| @>>>>>',
    \   '                   $str,     $%,    ''$'' . int($num)',
    \   '         .',
    \   '',
    \   '         $str = "widget";',
    \   '         $num = $cost/$quantity;',
    \   '         $~ = ''Something'';',
    \   '         write;',
    \   '',
    \   '     See perlform for many details and examples.',
    \ ],
    \ 'formline': [
    \   '    formline PICTURE,LIST',
    \   '     This is an internal function used by "format"s, though you may',
    \   '     call it, too. It formats (see perlform) a list of values',
    \   '     according to the contents of PICTURE, placing the output into',
    \   '     the format output accumulator, $^A (or $ACCUMULATOR in English).',
    \   '     Eventually, when a "write" is done, the contents of $^A are',
    \   '     written to some filehandle. You could also read $^A and then set',
    \   '     $^A back to "". Note that a format typically does one "formline"',
    \   '     per line of form, but the "formline" function itself doesn''t',
    \   '     care how many newlines are embedded in the PICTURE. This means',
    \   '     that the "~" and "~~" tokens will treat the entire PICTURE as a',
    \   '     single line. You may therefore need to use multiple formlines to',
    \   '     implement a single record format, just like the format compiler.',
    \   '',
    \   '     Be careful if you put double quotes around the picture, because',
    \   '     an "@" character may be taken to mean the beginning of an array',
    \   '     name. "formline" always returns true. See perlform for other',
    \   '     examples.',
    \ ],
    \ 'getc': [
    \   '    getc FILEHANDLE',
    \   '    getc    Returns the next character from the input file attached to',
    \   '     FILEHANDLE, or the undefined value at end of file, or if there',
    \   '     was an error (in the latter case $! is set). If FILEHANDLE is',
    \   '     omitted, reads from STDIN. This is not particularly efficient.',
    \   '     However, it cannot be used by itself to fetch single characters',
    \   '     without waiting for the user to hit enter. For that, try',
    \   '     something more like:',
    \   '',
    \   '         if ($BSD_STYLE) {',
    \   '             system "stty cbreak </dev/tty >/dev/tty 2>&1";',
    \   '         }',
    \   '         else {',
    \   '             system "stty", ''-icanon'', ''eol'', "\001";',
    \   '         }',
    \   '',
    \   '         $key = getc(STDIN);',
    \   '',
    \   '         if ($BSD_STYLE) {',
    \   '             system "stty -cbreak </dev/tty >/dev/tty 2>&1";',
    \   '         }',
    \   '         else {',
    \   '             system "stty", ''icanon'', ''eol'', ''^@''; # ASCII null',
    \   '         }',
    \   '         print "\n";',
    \   '',
    \   '     Determination of whether $BSD_STYLE should be set is left as an',
    \   '     exercise to the reader.',
    \   '...',
    \ ],
    \ 'getgrent': [
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '...',
    \ ],
    \ 'getgrgid': [
    \   '    getgrgid GID',
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '...',
    \ ],
    \ 'getgrnam': [
    \   '    getgrnam NAME',
    \   '    gethostbyname NAME',
    \   '    getnetbyname NAME',
    \   '    getprotobyname NAME',
    \   '    getpwuid UID',
    \   '    getgrgid GID',
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '...',
    \ ],
    \ 'gethostbyaddr': [
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '...',
    \ ],
    \ 'gethostbyname': [
    \   '    gethostbyname NAME',
    \   '    getnetbyname NAME',
    \   '    getprotobyname NAME',
    \   '    getpwuid UID',
    \   '    getgrgid GID',
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '...',
    \ ],
    \ 'gethostent': [
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '...',
    \ ],
    \ 'getlogin': [
    \   '    getlogin',
    \   '     This implements the C library function of the same name, which',
    \   '     on most systems returns the current login from /etc/utmp, if',
    \   '     any. If null, use "getpwuid".',
    \   '',
    \   '         $login = getlogin || getpwuid($<) || "Kilroy";',
    \   '',
    \   '     Do not consider "getlogin" for authentication: it is not as',
    \   '     secure as "getpwuid".',
    \ ],
    \ 'getnetbyaddr': [
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '...',
    \ ],
    \ 'getnetbyname': [
    \   '    getnetbyname NAME',
    \   '    getprotobyname NAME',
    \   '    getpwuid UID',
    \   '    getgrgid GID',
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '...',
    \ ],
    \ 'getnetent': [
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '...',
    \ ],
    \ 'getpeername': [
    \   '    getpeername SOCKET',
    \   '     Returns the packed sockaddr address of other end of the SOCKET',
    \   '     connection.',
    \   '',
    \   '         use Socket;',
    \   '         $hersockaddr    = getpeername(SOCK);',
    \   '         ($port, $iaddr) = sockaddr_in($hersockaddr);',
    \   '         $herhostname    = gethostbyaddr($iaddr, AF_INET);',
    \   '         $herstraddr     = inet_ntoa($iaddr);',
    \ ],
    \ 'getpgrp': [
    \   '    getpgrp PID',
    \   '     Returns the current process group for the specified PID. Use a',
    \   '     PID of 0 to get the current process group for the current',
    \   '     process. Will raise an exception if used on a machine that',
    \   '     doesn''t implement getpgrp(2). If PID is omitted, returns process',
    \   '     group of current process. Note that the POSIX version of',
    \   '     "getpgrp" does not accept a PID argument, so only "PID==0" is',
    \   '     truly portable.',
    \ ],
    \ 'getppid': [
    \   '    getppid Returns the process id of the parent process.',
    \   '',
    \   '     Note for Linux users: on Linux, the C functions "getpid()" and',
    \   '     "getppid()" return different values from different threads. In',
    \   '     order to be portable, this behavior is not reflected by the',
    \   '     perl-level function "getppid()", that returns a consistent value',
    \   '     across threads. If you want to call the underlying "getppid()",',
    \   '     you may use the CPAN module "Linux::Pid".',
    \ ],
    \ 'getpriority': [
    \   '    getpriority WHICH,WHO',
    \   '     Returns the current priority for a process, a process group, or',
    \   '     a user. (See getpriority(2).) Will raise a fatal exception if',
    \   '     used on a machine that doesn''t implement getpriority(2).',
    \ ],
    \ 'getprotobyname': [
    \   '    getprotobyname NAME',
    \   '    getpwuid UID',
    \   '    getgrgid GID',
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '...',
    \ ],
    \ 'getprotobynumber': [
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '...',
    \ ],
    \ 'getprotoent': [
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '...',
    \ ],
    \ 'getpwent': [
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '...',
    \ ],
    \ 'getpwnam': [
    \   '    getpwnam NAME',
    \ ],
    \ 'getpwuid': [
    \   '    getpwuid UID',
    \   '    getgrgid GID',
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '...',
    \ ],
    \ 'getservbyname': [
    \   '    getservbyname NAME,PROTO',
    \   '    gethostbyaddr ADDR,ADDRTYPE',
    \   '    getnetbyaddr ADDR,ADDRTYPE',
    \   '    getprotobynumber NUMBER',
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '...',
    \ ],
    \ 'getservbyport': [
    \   '    getservbyport PORT,PROTO',
    \   '    getpwent',
    \   '    getgrent',
    \   '    gethostent',
    \   '    getnetent',
    \   '    getprotoent',
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '...',
    \ ],
    \ 'getservent': [
    \   '    getservent',
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '...',
    \ ],
    \ 'getsockname': [
    \   '    getsockname SOCKET',
    \   '     Returns the packed sockaddr address of this end of the SOCKET',
    \   '     connection, in case you don''t know the address because you have',
    \   '     several different IPs that the connection might have come in on.',
    \   '',
    \   '         use Socket;',
    \   '         $mysockaddr = getsockname(SOCK);',
    \   '         ($port, $myaddr) = sockaddr_in($mysockaddr);',
    \   '         printf "Connect to %s [%s]\n",',
    \   '            scalar gethostbyaddr($myaddr, AF_INET),',
    \   '            inet_ntoa($myaddr);',
    \ ],
    \ 'getsockopt': [
    \   '    getsockopt SOCKET,LEVEL,OPTNAME',
    \   '     Queries the option named OPTNAME associated with SOCKET at a',
    \   '     given LEVEL. Options may exist at multiple protocol levels',
    \   '     depending on the socket type, but at least the uppermost socket',
    \   '     level SOL_SOCKET (defined in the "Socket" module) will exist. To',
    \   '     query options at another level the protocol number of the',
    \   '     appropriate protocol controlling the option should be supplied.',
    \   '     For example, to indicate that an option is to be interpreted by',
    \   '     the TCP protocol, LEVEL should be set to the protocol number of',
    \   '     TCP, which you can get using getprotobyname.',
    \   '',
    \   '     The call returns a packed string representing the requested',
    \   '     socket option, or "undef" if there is an error (the error reason',
    \   '     will be in $!). What exactly is in the packed string depends in',
    \   '     the LEVEL and OPTNAME, consult your system documentation for',
    \   '     details. A very common case however is that the option is an',
    \   '     integer, in which case the result will be a packed integer which',
    \   '     you can decode using unpack with the "i" (or "I") format.',
    \   '',
    \   '     An example testing if Nagle''s algorithm is turned on on a',
    \   '     socket:',
    \   '',
    \   '         use Socket qw(:all);',
    \   '',
    \   '         defined(my $tcp = getprotobyname("tcp"))',
    \   '             or die "Could not determine the protocol number for tcp";',
    \   '         # my $tcp = IPPROTO_TCP; # Alternative',
    \   '         my $packed = getsockopt($socket, $tcp, TCP_NODELAY)',
    \   '             or die "Could not query TCP_NODELAY socket option: $!";',
    \   '...',
    \ ],
    \ 'glob': [
    \   '    glob EXPR',
    \   '    glob    In list context, returns a (possibly empty) list of filename',
    \   '     expansions on the value of EXPR such as the standard Unix shell',
    \   '     /bin/csh would do. In scalar context, glob iterates through such',
    \   '     filename expansions, returning undef when the list is exhausted.',
    \   '     This is the internal function implementing the "<*.c>" operator,',
    \   '     but you can use it directly. If EXPR is omitted, $_ is used. The',
    \   '     "<*.c>" operator is discussed in more detail in "I/O Operators"',
    \   '     in perlop.',
    \   '',
    \   '     Note that "glob" will split its arguments on whitespace,',
    \   '     treating each segment as separate pattern. As such, "glob(''*.c',
    \   '     *.h'')" would match all files with a .c or .h extension. The',
    \   '     expression "glob(''.* *'')" would match all files in the current',
    \   '     working directory.',
    \   '',
    \   '     Beginning with v5.6.0, this operator is implemented using the',
    \   '     standard "File::Glob" extension. See File::Glob for details,',
    \   '     including "bsd_glob" which does not treat whitespace as a',
    \   '     pattern separator.',
    \ ],
    \ 'gmtime': [
    \   '    gmtime EXPR',
    \   '    gmtime  Works just like localtime but the returned values are localized',
    \   '     for the standard Greenwich time zone.',
    \   '',
    \   '     Note: when called in list context, $isdst, the last value',
    \   '     returned by gmtime is always 0. There is no Daylight Saving Time',
    \   '     in GMT.',
    \   '',
    \   '     See "gmtime" in perlport for portability concerns.',
    \ ],
    \ 'goto': [
    \   '    goto LABEL',
    \   '    goto EXPR',
    \   '    goto &NAME',
    \   '     The "goto-LABEL" form finds the statement labeled with LABEL and',
    \   '     resumes execution there. It may not be used to go into any',
    \   '     construct that requires initialization, such as a subroutine or',
    \   '     a "foreach" loop. It also can''t be used to go into a construct',
    \   '     that is optimized away, or to get out of a block or subroutine',
    \   '     given to "sort". It can be used to go almost anywhere else',
    \   '     within the dynamic scope, including out of subroutines, but it''s',
    \   '     usually better to use some other construct such as "last" or',
    \   '     "die". The author of Perl has never felt the need to use this',
    \   '     form of "goto" (in Perl, that is--C is another matter). (The',
    \   '     difference being that C does not offer named loops combined with',
    \   '     loop control. Perl does, and this replaces most structured uses',
    \   '     of "goto" in other languages.)',
    \   '',
    \   '     The "goto-EXPR" form expects a label name, whose scope will be',
    \   '     resolved dynamically. This allows for computed "goto"s per',
    \   '     FORTRAN, but isn''t necessarily recommended if you''re optimizing',
    \   '     for maintainability:',
    \   '',
    \   '         goto ("FOO", "BAR", "GLARCH")[$i];',
    \   '',
    \   '     The "goto-&NAME" form is quite different from the other forms of',
    \   '     "goto". In fact, it isn''t a goto in the normal sense at all, and',
    \   '     doesn''t have the stigma associated with other gotos. Instead, it',
    \   '     exits the current subroutine (losing any changes set by local())',
    \   '     and immediately calls in its place the named subroutine using',
    \   '...',
    \ ],
    \ 'grep': [
    \   '    grep BLOCK LIST',
    \   '    grep EXPR,LIST',
    \   '     This is similar in spirit to, but not the same as, grep(1) and',
    \   '     its relatives. In particular, it is not limited to using regular',
    \   '     expressions.',
    \   '',
    \   '     Evaluates the BLOCK or EXPR for each element of LIST (locally',
    \   '     setting $_ to each element) and returns the list value',
    \   '     consisting of those elements for which the expression evaluated',
    \   '     to true. In scalar context, returns the number of times the',
    \   '     expression was true.',
    \   '',
    \   '         @foo = grep(!/^#/, @bar);    # weed out comments',
    \   '',
    \   '     or equivalently,',
    \   '',
    \   '         @foo = grep {!/^#/} @bar;    # weed out comments',
    \   '',
    \   '     Note that $_ is an alias to the list value, so it can be used to',
    \   '     modify the elements of the LIST. While this is useful and',
    \   '     supported, it can cause bizarre results if the elements of LIST',
    \   '     are not variables. Similarly, grep returns aliases into the',
    \   '     original list, much as a for loop''s index variable aliases the',
    \   '     list elements. That is, modifying an element of a list returned',
    \   '     by grep (for example, in a "foreach", "map" or another "grep")',
    \   '     actually modifies the element in the original list. This is',
    \   '     usually something to be avoided when writing clear code.',
    \   '',
    \   '     If $_ is lexical in the scope where the "grep" appears (because',
    \   '...',
    \ ],
    \ 'hex': [
    \   '    hex EXPR',
    \   '    hex     Interprets EXPR as a hex string and returns the corresponding',
    \   '     value. (To convert strings that might start with either 0, "0x",',
    \   '     or "0b", see "oct".) If EXPR is omitted, uses $_.',
    \   '',
    \   '         print hex ''0xAf''; # prints ''175''',
    \   '         print hex ''aF'';   # same',
    \   '',
    \   '     Hex strings may only represent integers. Strings that would',
    \   '     cause integer overflow trigger a warning. Leading whitespace is',
    \   '     not stripped, unlike oct(). To present something as hex, look',
    \   '     into "printf", "sprintf", or "unpack".',
    \ ],
    \ 'import': [
    \   '    import LIST',
    \   '     There is no builtin "import" function. It is just an ordinary',
    \   '     method (subroutine) defined (or inherited) by modules that wish',
    \   '     to export names to another module. The "use" function calls the',
    \   '     "import" method for the package used. See also "use", perlmod,',
    \   '     and Exporter.',
    \ ],
    \ 'index': [
    \   '    index STR,SUBSTR,POSITION',
    \   '    index STR,SUBSTR',
    \   '     The index function searches for one string within another, but',
    \   '     without the wildcard-like behavior of a full regular-expression',
    \   '     pattern match. It returns the position of the first occurrence',
    \   '     of SUBSTR in STR at or after POSITION. If POSITION is omitted,',
    \   '     starts searching from the beginning of the string. POSITION',
    \   '     before the beginning of the string or after its end is treated',
    \   '     as if it were the beginning or the end, respectively. POSITION',
    \   '     and the return value are based at 0 (or whatever you''ve set the',
    \   '     $[ variable to--but don''t do that). If the substring is not',
    \   '     found, "index" returns one less than the base, ordinarily -1.',
    \ ],
    \ 'int': [
    \   '    int EXPR',
    \   '    int     Returns the integer portion of EXPR. If EXPR is omitted, uses',
    \   '     $_. You should not use this function for rounding: one because',
    \   '     it truncates towards 0, and two because machine representations',
    \   '     of floating point numbers can sometimes produce counterintuitive',
    \   '     results. For example, "int(-6.725/0.025)" produces -268 rather',
    \   '     than the correct -269; that''s because it''s really more like',
    \   '     -268.99999999999994315658 instead. Usually, the "sprintf",',
    \   '     "printf", or the "POSIX::floor" and "POSIX::ceil" functions will',
    \   '     serve you better than will int().',
    \ ],
    \ 'ioctl': [
    \   '    ioctl FILEHANDLE,FUNCTION,SCALAR',
    \   '     Implements the ioctl(2) function. You''ll probably first have to',
    \   '     say',
    \   '',
    \   '         require "sys/ioctl.ph";     # probably in $Config{archlib}/sys/ioctl.ph',
    \   '',
    \   '     to get the correct function definitions. If sys/ioctl.ph doesn''t',
    \   '     exist or doesn''t have the correct definitions you''ll have to',
    \   '     roll your own, based on your C header files such as',
    \   '     <sys/ioctl.h>. (There is a Perl script called h2ph that comes',
    \   '     with the Perl kit that may help you in this, but it''s',
    \   '     nontrivial.) SCALAR will be read and/or written depending on the',
    \   '     FUNCTION--a pointer to the string value of SCALAR will be passed',
    \   '     as the third argument of the actual "ioctl" call. (If SCALAR has',
    \   '     no string value but does have a numeric value, that value will',
    \   '     be passed rather than a pointer to the string value. To',
    \   '     guarantee this to be true, add a 0 to the scalar before using',
    \   '     it.) The "pack" and "unpack" functions may be needed to',
    \   '     manipulate the values of structures used by "ioctl".',
    \   '',
    \   '     The return value of "ioctl" (and "fcntl") is as follows:',
    \   '',
    \   '             if OS returns:          then Perl returns:',
    \   '                 -1                    undefined value',
    \   '                  0                  string "0 but true"',
    \   '             anything else               that number',
    \   '',
    \   '     Thus Perl returns true on success and false on failure, yet you',
    \   '     can still easily determine the actual value returned by the',
    \   '...',
    \ ],
    \ 'join': [
    \   '    join EXPR,LIST',
    \   '     Joins the separate strings of LIST into a single string with',
    \   '     fields separated by the value of EXPR, and returns that new',
    \   '     string. Example:',
    \   '',
    \   '         $rec = join('':'', $login,$passwd,$uid,$gid,$gcos,$home,$shell);',
    \   '',
    \   '     Beware that unlike "split", "join" doesn''t take a pattern as its',
    \   '     first argument. Compare "split".',
    \ ],
    \ 'keys': [
    \   '    keys HASH',
    \   '     Returns a list consisting of all the keys of the named hash. (In',
    \   '     scalar context, returns the number of keys.)',
    \   '',
    \   '     The keys are returned in an apparently random order. The actual',
    \   '     random order is subject to change in future versions of perl,',
    \   '     but it is guaranteed to be the same order as either the "values"',
    \   '     or "each" function produces (given that the hash has not been',
    \   '     modified). Since Perl 5.8.1 the ordering is different even',
    \   '     between different runs of Perl for security reasons (see',
    \   '     "Algorithmic Complexity Attacks" in perlsec).',
    \   '',
    \   '     As a side effect, calling keys() resets the HASH''s internal',
    \   '     iterator (see "each"). In particular, calling keys() in void',
    \   '     context resets the iterator with no other overhead.',
    \   '',
    \   '     Here is yet another way to print your environment:',
    \   '',
    \   '         @keys = keys %ENV;',
    \   '         @values = values %ENV;',
    \   '         while (@keys) {',
    \   '             print pop(@keys), ''='', pop(@values), "\n";',
    \   '         }',
    \   '',
    \   '     or how about sorted by key:',
    \   '',
    \   '         foreach $key (sort(keys %ENV)) {',
    \   '             print $key, ''='', $ENV{$key}, "\n";',
    \   '         }',
    \   '...',
    \ ],
    \ 'kill': [
    \   '    kill SIGNAL, LIST',
    \   '     Sends a signal to a list of processes. Returns the number of',
    \   '     processes successfully signaled (which is not necessarily the',
    \   '     same as the number actually killed).',
    \   '',
    \   '         $cnt = kill 1, $child1, $child2;',
    \   '         kill 9, @goners;',
    \   '',
    \   '     If SIGNAL is zero, no signal is sent to the process, but the',
    \   '     kill(2) system call will check whether it''s possible to send a',
    \   '     signal to it (that means, to be brief, that the process is owned',
    \   '     by the same user, or we are the super-user). This is a useful',
    \   '     way to check that a child process is alive (even if only as a',
    \   '     zombie) and hasn''t changed its UID. See perlport for notes on',
    \   '     the portability of this construct.',
    \   '',
    \   '     Unlike in the shell, if SIGNAL is negative, it kills process',
    \   '     groups instead of processes. (On System V, a negative *PROCESS*',
    \   '     number will also kill process groups, but that''s not portable.)',
    \   '     That means you usually want to use positive not negative',
    \   '     signals. You may also use a signal name in quotes.',
    \   '',
    \   '     See "Signals" in perlipc for more details.',
    \ ],
    \ 'last': [
    \   '    last LABEL',
    \   '    last    The "last" command is like the "break" statement in C (as used',
    \   '     in loops); it immediately exits the loop in question. If the',
    \   '     LABEL is omitted, the command refers to the innermost enclosing',
    \   '     loop. The "continue" block, if any, is not executed:',
    \   '',
    \   '         LINE: while (<STDIN>) {',
    \   '             last LINE if /^$/;      # exit when done with header',
    \   '             #...',
    \   '         }',
    \   '',
    \   '     "last" cannot be used to exit a block which returns a value such',
    \   '     as "eval {}", "sub {}" or "do {}", and should not be used to',
    \   '     exit a grep() or map() operation.',
    \   '',
    \   '     Note that a block by itself is semantically identical to a loop',
    \   '     that executes once. Thus "last" can be used to effect an early',
    \   '     exit out of such a block.',
    \   '',
    \   '     See also "continue" for an illustration of how "last", "next",',
    \   '     and "redo" work.',
    \ ],
    \ 'lc': [
    \   '    lc EXPR',
    \   '    lc      Returns a lowercased version of EXPR. This is the internal',
    \   '     function implementing the "\L" escape in double-quoted strings.',
    \   '     Respects current LC_CTYPE locale if "use locale" in force. See',
    \   '     perllocale and perlunicode for more details about locale and',
    \   '     Unicode support.',
    \   '',
    \   '     If EXPR is omitted, uses $_.',
    \ ],
    \ 'lcfirst': [
    \   '    lcfirst EXPR',
    \   '    lcfirst Returns the value of EXPR with the first character lowercased.',
    \   '     This is the internal function implementing the "\l" escape in',
    \   '     double-quoted strings. Respects current LC_CTYPE locale if "use',
    \   '     locale" in force. See perllocale and perlunicode for more',
    \   '     details about locale and Unicode support.',
    \   '',
    \   '     If EXPR is omitted, uses $_.',
    \ ],
    \ 'length': [
    \   '    length EXPR',
    \   '    length  Returns the length in *characters* of the value of EXPR. If EXPR',
    \   '     is omitted, returns length of $_. Note that this cannot be used',
    \   '     on an entire array or hash to find out how many elements these',
    \   '     have. For that, use "scalar @array" and "scalar keys %hash"',
    \   '     respectively.',
    \   '',
    \   '     Note the *characters*: if the EXPR is in Unicode, you will get',
    \   '     the number of characters, not the number of bytes. To get the',
    \   '     length of the internal string in bytes, use',
    \   '     "bytes::length(EXPR)", see bytes. Note that the internal',
    \   '     encoding is variable, and the number of bytes usually',
    \   '     meaningless. To get the number of bytes that the string would',
    \   '     have when encoded as UTF-8, use',
    \   '     "length(Encoding::encode_utf8(EXPR))".',
    \ ],
    \ 'link': [
    \   '    link OLDFILE,NEWFILE',
    \   '     Creates a new filename linked to the old filename. Returns true',
    \   '     for success, false otherwise.',
    \ ],
    \ 'listen': [
    \   '    listen SOCKET,QUEUESIZE',
    \   '     Does the same thing that the listen system call does. Returns',
    \   '     true if it succeeded, false otherwise. See the example in',
    \   '     "Sockets: Client/Server Communication" in perlipc.',
    \ ],
    \ 'local': [
    \   '    local EXPR',
    \   '     You really probably want to be using "my" instead, because',
    \   '     "local" isn''t what most people think of as "local". See "Private',
    \   '     Variables via my()" in perlsub for details.',
    \   '',
    \   '     A local modifies the listed variables to be local to the',
    \   '     enclosing block, file, or eval. If more than one value is',
    \   '     listed, the list must be placed in parentheses. See "Temporary',
    \   '     Values via local()" in perlsub for details, including issues',
    \   '     with tied arrays and hashes.',
    \ ],
    \ 'localtime': [
    \   '    localtime EXPR',
    \   '    localtime',
    \   '     Converts a time as returned by the time function to a 9-element',
    \   '     list with the time analyzed for the local time zone. Typically',
    \   '     used as follows:',
    \   '',
    \   '         #  0    1    2     3     4    5     6     7     8',
    \   '         ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =',
    \   '                                                     localtime(time);',
    \   '',
    \   '     All list elements are numeric, and come straight out of the C',
    \   '     `struct tm''. $sec, $min, and $hour are the seconds, minutes, and',
    \   '     hours of the specified time.',
    \   '',
    \   '     $mday is the day of the month, and $mon is the month itself, in',
    \   '     the range 0..11 with 0 indicating January and 11 indicating',
    \   '     December. This makes it easy to get a month name from a list:',
    \   '',
    \   '         my @abbr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );',
    \   '         print "$abbr[$mon] $mday";',
    \   '         # $mon=9, $mday=18 gives "Oct 18"',
    \   '',
    \   '     $year is the number of years since 1900, not just the last two',
    \   '     digits of the year. That is, $year is 123 in year 2023. The',
    \   '     proper way to get a complete 4-digit year is simply:',
    \   '',
    \   '         $year += 1900;',
    \   '',
    \   '     Otherwise you create non-Y2K-compliant programs--and you',
    \   '...',
    \ ],
    \ 'lock': [
    \   '    lock THING',
    \   '     This function places an advisory lock on a shared variable, or',
    \   '     referenced object contained in *THING* until the lock goes out',
    \   '     of scope.',
    \   '',
    \   '     lock() is a "weak keyword" : this means that if you''ve defined a',
    \   '     function by this name (before any calls to it), that function',
    \   '     will be called instead. (However, if you''ve said "use threads",',
    \   '     lock() is always a keyword.) See threads.',
    \ ],
    \ 'log': [
    \   '    log EXPR',
    \   '    log     Returns the natural logarithm (base *e*) of EXPR. If EXPR is',
    \   '     omitted, returns log of $_. To get the log of another base, use',
    \   '     basic algebra: The base-N log of a number is equal to the',
    \   '     natural log of that number divided by the natural log of N. For',
    \   '     example:',
    \   '',
    \   '         sub log10 {',
    \   '             my $n = shift;',
    \   '             return log($n)/log(10);',
    \   '         }',
    \   '',
    \   '     See also "exp" for the inverse operation.',
    \ ],
    \ 'lstat': [
    \   '    lstat EXPR',
    \   '    lstat   Does the same thing as the "stat" function (including setting',
    \   '     the special "_" filehandle) but stats a symbolic link instead of',
    \   '     the file the symbolic link points to. If symbolic links are',
    \   '     unimplemented on your system, a normal "stat" is done. For much',
    \   '     more detailed information, please see the documentation for',
    \   '     "stat".',
    \   '',
    \   '     If EXPR is omitted, stats $_.',
    \ ],
    \ 'm': [
    \   '    m//     The match operator. See "Regexp Quote-Like Operators" in perlop.',
    \ ],
    \ 'map': [
    \   '    map BLOCK LIST',
    \   '    map EXPR,LIST',
    \   '     Evaluates the BLOCK or EXPR for each element of LIST (locally',
    \   '     setting $_ to each element) and returns the list value composed',
    \   '     of the results of each such evaluation. In scalar context,',
    \   '     returns the total number of elements so generated. Evaluates',
    \   '     BLOCK or EXPR in list context, so each element of LIST may',
    \   '     produce zero, one, or more elements in the returned value.',
    \   '',
    \   '         @chars = map(chr, @nums);',
    \   '',
    \   '     translates a list of numbers to the corresponding characters.',
    \   '     And',
    \   '',
    \   '         %hash = map { get_a_key_for($_) => $_ } @array;',
    \   '',
    \   '     is just a funny way to write',
    \   '',
    \   '         %hash = ();',
    \   '         foreach (@array) {',
    \   '             $hash{get_a_key_for($_)} = $_;',
    \   '         }',
    \   '',
    \   '     Note that $_ is an alias to the list value, so it can be used to',
    \   '     modify the elements of the LIST. While this is useful and',
    \   '     supported, it can cause bizarre results if the elements of LIST',
    \   '     are not variables. Using a regular "foreach" loop for this',
    \   '     purpose would be clearer in most cases. See also "grep" for an',
    \   '     array composed of those items of the original list for which the',
    \   '...',
    \ ],
    \ 'mkdir': [
    \   '    mkdir FILENAME,MASK',
    \   '    mkdir FILENAME',
    \   '    mkdir   Creates the directory specified by FILENAME, with permissions',
    \   '     specified by MASK (as modified by "umask"). If it succeeds it',
    \   '     returns true, otherwise it returns false and sets $! (errno). If',
    \   '     omitted, MASK defaults to 0777. If omitted, FILENAME defaults to',
    \   '     $_.',
    \   '',
    \   '     In general, it is better to create directories with permissive',
    \   '     MASK, and let the user modify that with their "umask", than it',
    \   '     is to supply a restrictive MASK and give the user no way to be',
    \   '     more permissive. The exceptions to this rule are when the file',
    \   '     or directory should be kept private (mail files, for instance).',
    \   '     The perlfunc(1) entry on "umask" discusses the choice of MASK in',
    \   '     more detail.',
    \   '',
    \   '     Note that according to the POSIX 1003.1-1996 the FILENAME may',
    \   '     have any number of trailing slashes. Some operating and',
    \   '     filesystems do not get this right, so Perl automatically removes',
    \   '     all trailing slashes to keep everyone happy.',
    \   '',
    \   '     In order to recursively create a directory structure look at the',
    \   '     "mkpath" function of the File::Path module.',
    \ ],
    \ 'msgctl': [
    \   '    msgctl ID,CMD,ARG',
    \   '     Calls the System V IPC function msgctl(2). You''ll probably have',
    \   '     to say',
    \   '',
    \   '         use IPC::SysV;',
    \   '',
    \   '     first to get the correct constant definitions. If CMD is',
    \   '     "IPC_STAT", then ARG must be a variable that will hold the',
    \   '     returned "msqid_ds" structure. Returns like "ioctl": the',
    \   '     undefined value for error, "0 but true" for zero, or the actual',
    \   '     return value otherwise. See also "SysV IPC" in perlipc,',
    \   '     "IPC::SysV", and "IPC::Semaphore" documentation.',
    \ ],
    \ 'msgget': [
    \   '    msgget KEY,FLAGS',
    \   '     Calls the System V IPC function msgget(2). Returns the message',
    \   '     queue id, or the undefined value if there is an error. See also',
    \   '     "SysV IPC" in perlipc and "IPC::SysV" and "IPC::Msg"',
    \   '     documentation.',
    \ ],
    \ 'msgrcv': [
    \   '    msgrcv ID,VAR,SIZE,TYPE,FLAGS',
    \   '     Calls the System V IPC function msgrcv to receive a message from',
    \   '     message queue ID into variable VAR with a maximum message size',
    \   '     of SIZE. Note that when a message is received, the message type',
    \   '     as a native long integer will be the first thing in VAR,',
    \   '     followed by the actual message. This packing may be opened with',
    \   '     "unpack("l! a*")". Taints the variable. Returns true if',
    \   '     successful, or false if there is an error. See also "SysV IPC"',
    \   '     in perlipc, "IPC::SysV", and "IPC::SysV::Msg" documentation.',
    \ ],
    \ 'msgsnd': [
    \   '    msgsnd ID,MSG,FLAGS',
    \   '     Calls the System V IPC function msgsnd to send the message MSG',
    \   '     to the message queue ID. MSG must begin with the native long',
    \   '     integer message type, and be followed by the length of the',
    \   '     actual message, and finally the message itself. This kind of',
    \   '     packing can be achieved with "pack("l! a*", $type, $message)".',
    \   '     Returns true if successful, or false if there is an error. See',
    \   '     also "IPC::SysV" and "IPC::SysV::Msg" documentation.',
    \ ],
    \ 'my': [
    \   '    my EXPR',
    \   '    my TYPE EXPR',
    \   '    my EXPR : ATTRS',
    \   '    my TYPE EXPR : ATTRS',
    \   '     A "my" declares the listed variables to be local (lexically) to',
    \   '     the enclosing block, file, or "eval". If more than one value is',
    \   '     listed, the list must be placed in parentheses.',
    \   '',
    \   '     The exact semantics and interface of TYPE and ATTRS are still',
    \   '     evolving. TYPE is currently bound to the use of "fields" pragma,',
    \   '     and attributes are handled using the "attributes" pragma, or',
    \   '     starting from Perl 5.8.0 also via the "Attribute::Handlers"',
    \   '     module. See "Private Variables via my()" in perlsub for details,',
    \   '     and fields, attributes, and Attribute::Handlers.',
    \ ],
    \ 'next': [
    \   '    next LABEL',
    \   '    next    The "next" command is like the "continue" statement in C; it',
    \   '     starts the next iteration of the loop:',
    \   '',
    \   '         LINE: while (<STDIN>) {',
    \   '             next LINE if /^#/;      # discard comments',
    \   '             #...',
    \   '         }',
    \   '',
    \   '     Note that if there were a "continue" block on the above, it',
    \   '     would get executed even on discarded lines. If the LABEL is',
    \   '     omitted, the command refers to the innermost enclosing loop.',
    \   '',
    \   '     "next" cannot be used to exit a block which returns a value such',
    \   '     as "eval {}", "sub {}" or "do {}", and should not be used to',
    \   '     exit a grep() or map() operation.',
    \   '',
    \   '     Note that a block by itself is semantically identical to a loop',
    \   '     that executes once. Thus "next" will exit such a block early.',
    \   '',
    \   '     See also "continue" for an illustration of how "last", "next",',
    \   '     and "redo" work.',
    \ ],
    \ 'no': [
    \   '    no Module VERSION LIST',
    \   '    no Module VERSION',
    \   '    no Module LIST',
    \   '    no Module',
    \   '    no VERSION',
    \   '     See the "use" function, of which "no" is the opposite.',
    \ ],
    \ 'package': [
    \   '    package NAMESPACE',
    \   '    package Declares the compilation unit as being in the given namespace.',
    \   '     The scope of the package declaration is from the declaration',
    \   '     itself through the end of the enclosing block, file, or eval',
    \   '     (the same as the "my" operator). All further unqualified dynamic',
    \   '     identifiers will be in this namespace. A package statement',
    \   '     affects only dynamic variables--including those you''ve used',
    \   '     "local" on--but *not* lexical variables, which are created with',
    \   '     "my". Typically it would be the first declaration in a file to',
    \   '     be included by the "require" or "use" operator. You can switch',
    \   '     into a package in more than one place; it merely influences',
    \   '     which symbol table is used by the compiler for the rest of that',
    \   '     block. You can refer to variables and filehandles in other',
    \   '     packages by prefixing the identifier with the package name and a',
    \   '     double colon: $Package::Variable. If the package name is null,',
    \   '     the "main" package as assumed. That is, $::sail is equivalent to',
    \   '     $main::sail (as well as to $main''sail, still seen in older',
    \   '     code).',
    \   '',
    \   '     See "Packages" in perlmod for more information about packages,',
    \   '     modules, and classes. See perlsub for other scoping issues.',
    \ ],
    \ 'prototype': [
    \   '    prototype FUNCTION',
    \   '     Returns the prototype of a function as a string (or "undef" if',
    \   '     the function has no prototype). FUNCTION is a reference to, or',
    \   '     the name of, the function whose prototype you want to retrieve.',
    \   '',
    \   '     If FUNCTION is a string starting with "CORE::", the rest is',
    \   '     taken as a name for Perl builtin. If the builtin is not',
    \   '     *overridable* (such as "qw//") or if its arguments cannot be',
    \   '     adequately expressed by a prototype (such as "system"),',
    \   '     prototype() returns "undef", because the builtin does not really',
    \   '     behave like a Perl function. Otherwise, the string describing',
    \   '     the equivalent prototype is returned.',
    \ ],
    \ 'oct': [
    \   '    oct EXPR',
    \   '    oct     Interprets EXPR as an octal string and returns the corresponding',
    \   '     value. (If EXPR happens to start off with "0x", interprets it as',
    \   '     a hex string. If EXPR starts off with "0b", it is interpreted as',
    \   '     a binary string. Leading whitespace is ignored in all three',
    \   '     cases.) The following will handle decimal, binary, octal, and',
    \   '     hex in the standard Perl or C notation:',
    \   '',
    \   '         $val = oct($val) if $val =~ /^0/;',
    \   '',
    \   '     If EXPR is omitted, uses $_. To go the other way (produce a',
    \   '     number in octal), use sprintf() or printf():',
    \   '',
    \   '         $perms = (stat("filename"))[2] & 07777;',
    \   '         $oct_perms = sprintf "%lo", $perms;',
    \   '',
    \   '     The oct() function is commonly used when a string such as 644',
    \   '     needs to be converted into a file mode, for example. (Although',
    \   '     perl will automatically convert strings into numbers as needed,',
    \   '     this automatic conversion assumes base 10.)',
    \ ],
    \ 'open': [
    \   '    open FILEHANDLE,EXPR',
    \   '    open FILEHANDLE,MODE,EXPR',
    \   '    open FILEHANDLE,MODE,EXPR,LIST',
    \   '    open FILEHANDLE,MODE,REFERENCE',
    \   '    open FILEHANDLE',
    \   '     Opens the file whose filename is given by EXPR, and associates',
    \   '     it with FILEHANDLE.',
    \   '',
    \   '     Simple examples to open a file for reading:',
    \   '',
    \   '         open(my $fh, ''<'', "input.txt") or die $!;',
    \   '',
    \   '     and for writing:',
    \   '',
    \   '         open(my $fh, ''>'', "output.txt") or die $!;',
    \   '',
    \   '     (The following is a comprehensive reference to open(): for a',
    \   '     gentler introduction you may consider perlopentut.)',
    \   '',
    \   '     If FILEHANDLE is an undefined scalar variable (or array or hash',
    \   '     element) the variable is assigned a reference to a new anonymous',
    \   '     filehandle, otherwise if FILEHANDLE is an expression, its value',
    \   '     is used as the name of the real filehandle wanted. (This is',
    \   '     considered a symbolic reference, so "use strict ''refs''" should',
    \   '     *not* be in effect.)',
    \   '',
    \   '     If EXPR is omitted, the scalar variable of the same name as the',
    \   '     FILEHANDLE contains the filename. (Note that lexical',
    \   '     variables--those declared with "my"--will not work for this',
    \   '...',
    \ ],
    \ 'opendir': [
    \   '    opendir DIRHANDLE,EXPR',
    \   '     Opens a directory named EXPR for processing by "readdir",',
    \   '     "telldir", "seekdir", "rewinddir", and "closedir". Returns true',
    \   '     if successful. DIRHANDLE may be an expression whose value can be',
    \   '     used as an indirect dirhandle, usually the real dirhandle name.',
    \   '     If DIRHANDLE is an undefined scalar variable (or array or hash',
    \   '     element), the variable is assigned a reference to a new',
    \   '     anonymous dirhandle. DIRHANDLEs have their own namespace',
    \   '     separate from FILEHANDLEs.',
    \   '',
    \   '     See example at "readdir".',
    \ ],
    \ 'ord': [
    \   '    ord EXPR',
    \   '    ord     Returns the numeric (the native 8-bit encoding, like ASCII or',
    \   '     EBCDIC, or Unicode) value of the first character of EXPR. If',
    \   '     EXPR is omitted, uses $_.',
    \   '',
    \   '     For the reverse, see "chr". See perlunicode for more about',
    \   '     Unicode.',
    \ ],
    \ 'our': [
    \   '    our EXPR',
    \   '    our TYPE EXPR',
    \   '    our EXPR : ATTRS',
    \   '    our TYPE EXPR : ATTRS',
    \   '     "our" associates a simple name with a package variable in the',
    \   '     current package for use within the current scope. When "use',
    \   '     strict ''vars''" is in effect, "our" lets you use declared global',
    \   '     variables without qualifying them with package names, within the',
    \   '     lexical scope of the "our" declaration. In this way "our"',
    \   '     differs from "use vars", which is package scoped.',
    \   '',
    \   '     Unlike "my", which both allocates storage for a variable and',
    \   '     associates a simple name with that storage for use within the',
    \   '     current scope, "our" associates a simple name with a package',
    \   '     variable in the current package, for use within the current',
    \   '     scope. In other words, "our" has the same scoping rules as "my",',
    \   '     but does not necessarily create a variable.',
    \   '',
    \   '     If more than one value is listed, the list must be placed in',
    \   '     parentheses.',
    \   '',
    \   '         our $foo;',
    \   '         our($bar, $baz);',
    \   '',
    \   '     An "our" declaration declares a global variable that will be',
    \   '     visible across its entire lexical scope, even across package',
    \   '     boundaries. The package in which the variable is entered is',
    \   '     determined at the point of the declaration, not at the point of',
    \   '     use. This means the following behavior holds:',
    \   '...',
    \ ],
    \ 'pack': [
    \   '    pack TEMPLATE,LIST',
    \   '     Takes a LIST of values and converts it into a string using the',
    \   '     rules given by the TEMPLATE. The resulting string is the',
    \   '     concatenation of the converted values. Typically, each converted',
    \   '     value looks like its machine-level representation. For example,',
    \   '     on 32-bit machines an integer may be represented by a sequence',
    \   '     of 4 bytes that will be converted to a sequence of 4 characters.',
    \   '',
    \   '     The TEMPLATE is a sequence of characters that give the order and',
    \   '     type of values, as follows:',
    \   '',
    \   '         a   A string with arbitrary binary data, will be null padded.',
    \   '         A   A text (ASCII) string, will be space padded.',
    \   '         Z   A null terminated (ASCIZ) string, will be null padded.',
    \   '',
    \   '         b   A bit string (ascending bit order inside each byte, like vec()).',
    \   '         B   A bit string (descending bit order inside each byte).',
    \   '         h   A hex string (low nybble first).',
    \   '         H   A hex string (high nybble first).',
    \   '',
    \   '         c   A signed char (8-bit) value.',
    \   '         C   An unsigned char (octet) value.',
    \   '         W   An unsigned char value (can be greater than 255).',
    \   '',
    \   '         s   A signed short (16-bit) value.',
    \   '         S   An unsigned short value.',
    \   '',
    \   '         l   A signed long (32-bit) value.',
    \   '         L   An unsigned long value.',
    \   '...',
    \ ],
    \ 'pipe': [
    \   '    pipe READHANDLE,WRITEHANDLE',
    \   '     Opens a pair of connected pipes like the corresponding system',
    \   '     call. Note that if you set up a loop of piped processes,',
    \   '     deadlock can occur unless you are very careful. In addition,',
    \   '     note that Perl''s pipes use IO buffering, so you may need to set',
    \   '     $| to flush your WRITEHANDLE after each command, depending on',
    \   '     the application.',
    \   '',
    \   '     See IPC::Open2, IPC::Open3, and "Bidirectional Communication" in',
    \   '     perlipc for examples of such things.',
    \   '',
    \   '     On systems that support a close-on-exec flag on files, the flag',
    \   '     will be set for the newly opened file descriptors as determined',
    \   '     by the value of $^F. See "$^F" in perlvar.',
    \ ],
    \ 'pop': [
    \   '    pop ARRAY',
    \   '    pop     Pops and returns the last value of the array, shortening the',
    \   '     array by one element.',
    \   '',
    \   '     If there are no elements in the array, returns the undefined',
    \   '     value (although this may happen at other times as well). If',
    \   '     ARRAY is omitted, pops the @ARGV array in the main program, and',
    \   '     the @_ array in subroutines, just like "shift".',
    \ ],
    \ 'pos': [
    \   '    pos SCALAR',
    \   '    pos     Returns the offset of where the last "m//g" search left off for',
    \   '     the variable in question ($_ is used when the variable is not',
    \   '     specified). Note that 0 is a valid match offset. "undef"',
    \   '     indicates that the search position is reset (usually due to',
    \   '     match failure, but can also be because no match has yet been',
    \   '     performed on the scalar). "pos" directly accesses the location',
    \   '     used by the regexp engine to store the offset, so assigning to',
    \   '     "pos" will change that offset, and so will also influence the',
    \   '     "\G" zero-width assertion in regular expressions. Because a',
    \   '     failed "m//gc" match doesn''t reset the offset, the return from',
    \   '     "pos" won''t change either in this case. See perlre and perlop.',
    \ ],
    \ 'print': [
    \   '    print FILEHANDLE LIST',
    \   '    print LIST',
    \   '    print   Prints a string or a list of strings. Returns true if',
    \   '     successful. FILEHANDLE may be a scalar variable name, in which',
    \   '     case the variable contains the name of or a reference to the',
    \   '     filehandle, thus introducing one level of indirection. (NOTE: If',
    \   '     FILEHANDLE is a variable and the next token is a term, it may be',
    \   '     misinterpreted as an operator unless you interpose a "+" or put',
    \   '     parentheses around the arguments.) If FILEHANDLE is omitted,',
    \   '     prints by default to standard output (or to the last selected',
    \   '     output channel--see "select"). If LIST is also omitted, prints',
    \   '     $_ to the currently selected output channel. To set the default',
    \   '     output channel to something other than STDOUT use the select',
    \   '     operation. The current value of $, (if any) is printed between',
    \   '     each LIST item. The current value of $\ (if any) is printed',
    \   '     after the entire LIST has been printed. Because print takes a',
    \   '     LIST, anything in the LIST is evaluated in list context, and any',
    \   '     subroutine that you call will have one or more of its',
    \   '     expressions evaluated in list context. Also be careful not to',
    \   '     follow the print keyword with a left parenthesis unless you want',
    \   '     the corresponding right parenthesis to terminate the arguments',
    \   '     to the print--interpose a "+" or put parentheses around all the',
    \   '     arguments.',
    \   '',
    \   '     Note that if you''re storing FILEHANDLEs in an array, or if',
    \   '     you''re using any other expression more complex than a scalar',
    \   '     variable to retrieve it, you will have to use a block returning',
    \   '     the filehandle value instead:',
    \   '...',
    \ ],
    \ 'printf': [
    \   '    printf FILEHANDLE FORMAT, LIST',
    \   '    printf FORMAT, LIST',
    \   '     Equivalent to "print FILEHANDLE sprintf(FORMAT, LIST)", except',
    \   '     that $\ (the output record separator) is not appended. The first',
    \   '     argument of the list will be interpreted as the "printf" format.',
    \   '     See "sprintf" for an explanation of the format argument. If "use',
    \   '     locale" is in effect, and POSIX::setlocale() has been called,',
    \   '     the character used for the decimal separator in formatted',
    \   '     floating point numbers is affected by the LC_NUMERIC locale. See',
    \   '     perllocale and POSIX.',
    \   '',
    \   '     Don''t fall into the trap of using a "printf" when a simple',
    \   '     "print" would do. The "print" is more efficient and less error',
    \   '     prone.',
    \ ],
    \ 'push': [
    \   '    push ARRAY,LIST',
    \   '     Treats ARRAY as a stack, and pushes the values of LIST onto the',
    \   '     end of ARRAY. The length of ARRAY increases by the length of',
    \   '     LIST. Has the same effect as',
    \   '',
    \   '         for $value (LIST) {',
    \   '             $ARRAY[++$#ARRAY] = $value;',
    \   '         }',
    \   '',
    \   '     but is more efficient. Returns the number of elements in the',
    \   '     array following the completed "push".',
    \ ],
    \ 'q': [
    \   '    q/STRING/',
    \   '    qq/STRING/',
    \   '    qx/STRING/',
    \   '    qw/STRING/',
    \   '     Generalized quotes. See "Quote-Like Operators" in perlop.',
    \ ],
    \ 'qq': [
    \   '    qq/STRING/',
    \   '    qx/STRING/',
    \   '    qw/STRING/',
    \   '     Generalized quotes. See "Quote-Like Operators" in perlop.',
    \ ],
    \ 'quotemeta': [
    \   '    quotemeta EXPR',
    \   '    quotemeta',
    \   '     Returns the value of EXPR with all non-"word" characters',
    \   '     backslashed. (That is, all characters not matching',
    \   '     "/[A-Za-z_0-9]/" will be preceded by a backslash in the returned',
    \   '     string, regardless of any locale settings.) This is the internal',
    \   '     function implementing the "\Q" escape in double-quoted strings.',
    \   '',
    \   '     If EXPR is omitted, uses $_.',
    \ ],
    \ 'qw': [
    \   '    qw/STRING/',
    \   '     Generalized quotes. See "Quote-Like Operators" in perlop.',
    \ ],
    \ 'qx': [
    \   '    qx/STRING/',
    \   '    qw/STRING/',
    \   '     Generalized quotes. See "Quote-Like Operators" in perlop.',
    \ ],
    \ 'qr': [
    \   '    qr/STRING/',
    \   '     Regexp-like quote. See "Regexp Quote-Like Operators" in perlop.',
    \ ],
    \ 'rand': [
    \   '    rand EXPR',
    \   '    rand    Returns a random fractional number greater than or equal to 0',
    \   '     and less than the value of EXPR. (EXPR should be positive.) If',
    \   '     EXPR is omitted, the value 1 is used. Currently EXPR with the',
    \   '     value 0 is also special-cased as 1 - this has not been',
    \   '     documented before perl 5.8.0 and is subject to change in future',
    \   '     versions of perl. Automatically calls "srand" unless "srand" has',
    \   '     already been called. See also "srand".',
    \   '',
    \   '     Apply "int()" to the value returned by "rand()" if you want',
    \   '     random integers instead of random fractional numbers. For',
    \   '     example,',
    \   '',
    \   '         int(rand(10))',
    \   '',
    \   '     returns a random integer between 0 and 9, inclusive.',
    \   '',
    \   '     (Note: If your rand function consistently returns numbers that',
    \   '     are too large or too small, then your version of Perl was',
    \   '     probably compiled with the wrong number of RANDBITS.)',
    \ ],
    \ 'read': [
    \   '    read FILEHANDLE,SCALAR,LENGTH,OFFSET',
    \   '    read FILEHANDLE,SCALAR,LENGTH',
    \   '     Attempts to read LENGTH *characters* of data into variable',
    \   '     SCALAR from the specified FILEHANDLE. Returns the number of',
    \   '     characters actually read, 0 at end of file, or undef if there',
    \   '     was an error (in the latter case $! is also set). SCALAR will be',
    \   '     grown or shrunk so that the last character actually read is the',
    \   '     last character of the scalar after the read.',
    \   '',
    \   '     An OFFSET may be specified to place the read data at some place',
    \   '     in the string other than the beginning. A negative OFFSET',
    \   '     specifies placement at that many characters counting backwards',
    \   '     from the end of the string. A positive OFFSET greater than the',
    \   '     length of SCALAR results in the string being padded to the',
    \   '     required size with "\0" bytes before the result of the read is',
    \   '     appended.',
    \   '',
    \   '     The call is actually implemented in terms of either Perl''s or',
    \   '     system''s fread() call. To get a true read(2) system call, see',
    \   '     "sysread".',
    \   '',
    \   '     Note the *characters*: depending on the status of the',
    \   '     filehandle, either (8-bit) bytes or characters are read. By',
    \   '     default all filehandles operate on bytes, but for example if the',
    \   '     filehandle has been opened with the ":utf8" I/O layer (see',
    \   '     "open", and the "open" pragma, open), the I/O will operate on',
    \   '     UTF-8 encoded Unicode characters, not bytes. Similarly for the',
    \   '     ":encoding" pragma: in that case pretty much any characters can',
    \   '     be read.',
    \ ],
    \ 'readdir': [
    \   '    readdir DIRHANDLE',
    \   '     Returns the next directory entry for a directory opened by',
    \   '     "opendir". If used in list context, returns all the rest of the',
    \   '     entries in the directory. If there are no more entries, returns',
    \   '     an undefined value in scalar context or a null list in list',
    \   '     context.',
    \   '',
    \   '     If you''re planning to filetest the return values out of a',
    \   '     "readdir", you''d better prepend the directory in question.',
    \   '     Otherwise, because we didn''t "chdir" there, it would have been',
    \   '     testing the wrong file.',
    \   '',
    \   '         opendir(my $dh, $some_dir) || die "can''t opendir $some_dir: $!";',
    \   '         @dots = grep { /^\./ && -f "$some_dir/$_" } readdir($dh);',
    \   '         closedir $dh;',
    \ ],
    \ 'readline': [
    \   '    readline EXPR',
    \   '    readline',
    \   '     Reads from the filehandle whose typeglob is contained in EXPR',
    \   '     (or from *ARGV if EXPR is not provided). In scalar context, each',
    \   '     call reads and returns the next line, until end-of-file is',
    \   '     reached, whereupon the subsequent call returns undef. In list',
    \   '     context, reads until end-of-file is reached and returns a list',
    \   '     of lines. Note that the notion of "line" used here is however',
    \   '     you may have defined it with $/ or $INPUT_RECORD_SEPARATOR). See',
    \   '     "$/" in perlvar.',
    \   '',
    \   '     When $/ is set to "undef", when readline() is in scalar context',
    \   '     (i.e. file slurp mode), and when an empty file is read, it',
    \   '     returns '''' the first time, followed by "undef" subsequently.',
    \   '',
    \   '     This is the internal function implementing the "<EXPR>"',
    \   '     operator, but you can use it directly. The "<EXPR>" operator is',
    \   '     discussed in more detail in "I/O Operators" in perlop.',
    \   '',
    \   '         $line = <STDIN>;',
    \   '         $line = readline(*STDIN);           # same thing',
    \   '',
    \   '     If readline encounters an operating system error, $! will be set',
    \   '     with the corresponding error message. It can be helpful to check',
    \   '     $! when you are reading from filehandles you don''t trust, such',
    \   '     as a tty or a socket. The following example uses the operator',
    \   '     form of "readline", and takes the necessary steps to ensure that',
    \   '     "readline" was successful.',
    \   '...',
    \ ],
    \ 'readlink': [
    \   '    readlink EXPR',
    \   '    readlink',
    \   '     Returns the value of a symbolic link, if symbolic links are',
    \   '     implemented. If not, gives a fatal error. If there is some',
    \   '     system error, returns the undefined value and sets $! (errno).',
    \   '     If EXPR is omitted, uses $_.',
    \ ],
    \ 'readpipe': [
    \   '    readpipe EXPR',
    \   '    readpipe',
    \   '     EXPR is executed as a system command. The collected standard',
    \   '     output of the command is returned. In scalar context, it comes',
    \   '     back as a single (potentially multi-line) string. In list',
    \   '     context, returns a list of lines (however you''ve defined lines',
    \   '     with $/ or $INPUT_RECORD_SEPARATOR). This is the internal',
    \   '     function implementing the "qx/EXPR/" operator, but you can use',
    \   '     it directly. The "qx/EXPR/" operator is discussed in more detail',
    \   '     in "I/O Operators" in perlop. If EXPR is omitted, uses $_.',
    \ ],
    \ 'recv': [
    \   '    recv SOCKET,SCALAR,LENGTH,FLAGS',
    \   '     Receives a message on a socket. Attempts to receive LENGTH',
    \   '     characters of data into variable SCALAR from the specified',
    \   '     SOCKET filehandle. SCALAR will be grown or shrunk to the length',
    \   '     actually read. Takes the same flags as the system call of the',
    \   '     same name. Returns the address of the sender if SOCKET''s',
    \   '     protocol supports this; returns an empty string otherwise. If',
    \   '     there''s an error, returns the undefined value. This call is',
    \   '     actually implemented in terms of recvfrom(2) system call. See',
    \   '     "UDP: Message Passing" in perlipc for examples.',
    \   '',
    \   '     Note the *characters*: depending on the status of the socket,',
    \   '     either (8-bit) bytes or characters are received. By default all',
    \   '     sockets operate on bytes, but for example if the socket has been',
    \   '     changed using binmode() to operate with the ":encoding(utf8)"',
    \   '     I/O layer (see the "open" pragma, open), the I/O will operate on',
    \   '     UTF-8 encoded Unicode characters, not bytes. Similarly for the',
    \   '     ":encoding" pragma: in that case pretty much any characters can',
    \   '     be read.',
    \ ],
    \ 'redo': [
    \   '    redo LABEL',
    \   '    redo    The "redo" command restarts the loop block without evaluating',
    \   '     the conditional again. The "continue" block, if any, is not',
    \   '     executed. If the LABEL is omitted, the command refers to the',
    \   '     innermost enclosing loop. Programs that want to lie to',
    \   '     themselves about what was just input normally use this command:',
    \   '',
    \   '         # a simpleminded Pascal comment stripper',
    \   '         # (warning: assumes no { or } in strings)',
    \   '         LINE: while (<STDIN>) {',
    \   '             while (s|({.*}.*){.*}|$1 |) {}',
    \   '             s|{.*}| |;',
    \   '             if (s|{.*| |) {',
    \   '                 $front = $_;',
    \   '                 while (<STDIN>) {',
    \   '                     if (/}/) {      # end of comment?',
    \   '                         s|^|$front\{|;',
    \   '                         redo LINE;',
    \   '                     }',
    \   '                 }',
    \   '             }',
    \   '             print;',
    \   '         }',
    \   '',
    \   '     "redo" cannot be used to retry a block which returns a value',
    \   '     such as "eval {}", "sub {}" or "do {}", and should not be used',
    \   '     to exit a grep() or map() operation.',
    \   '',
    \   '     Note that a block by itself is semantically identical to a loop',
    \   '...',
    \ ],
    \ 'ref': [
    \   '    ref EXPR',
    \   '    ref     Returns a non-empty string if EXPR is a reference, the empty',
    \   '     string otherwise. If EXPR is not specified, $_ will be used. The',
    \   '     value returned depends on the type of thing the reference is a',
    \   '     reference to. Builtin types include:',
    \   '',
    \   '         SCALAR',
    \   '         ARRAY',
    \   '         HASH',
    \   '         CODE',
    \   '         REF',
    \   '         GLOB',
    \   '         LVALUE',
    \   '         FORMAT',
    \   '         IO',
    \   '         VSTRING',
    \   '         Regexp',
    \   '',
    \   '     If the referenced object has been blessed into a package, then',
    \   '     that package name is returned instead. You can think of "ref" as',
    \   '     a "typeof" operator.',
    \   '',
    \   '         if (ref($r) eq "HASH") {',
    \   '             print "r is a reference to a hash.\n";',
    \   '         }',
    \   '         unless (ref($r)) {',
    \   '             print "r is not a reference at all.\n";',
    \   '         }',
    \   '...',
    \ ],
    \ 'rename': [
    \   '    rename OLDNAME,NEWNAME',
    \   '     Changes the name of a file; an existing file NEWNAME will be',
    \   '     clobbered. Returns true for success, false otherwise.',
    \   '',
    \   '     Behavior of this function varies wildly depending on your system',
    \   '     implementation. For example, it will usually not work across',
    \   '     file system boundaries, even though the system *mv* command',
    \   '     sometimes compensates for this. Other restrictions include',
    \   '     whether it works on directories, open files, or pre-existing',
    \   '     files. Check perlport and either the rename(2) manpage or',
    \   '     equivalent system documentation for details.',
    \   '',
    \   '     For a platform independent "move" function look at the',
    \   '     File::Copy module.',
    \ ],
    \ 'require': [
    \   '    require VERSION',
    \   '    require EXPR',
    \   '    require Demands a version of Perl specified by VERSION, or demands some',
    \   '     semantics specified by EXPR or by $_ if EXPR is not supplied.',
    \   '',
    \   '     VERSION may be either a numeric argument such as 5.006, which',
    \   '     will be compared to $], or a literal of the form v5.6.1, which',
    \   '     will be compared to $^V (aka $PERL_VERSION). A fatal error is',
    \   '     produced at run time if VERSION is greater than the version of',
    \   '     the current Perl interpreter. Compare with "use", which can do a',
    \   '     similar check at compile time.',
    \   '',
    \   '     Specifying VERSION as a literal of the form v5.6.1 should',
    \   '     generally be avoided, because it leads to misleading error',
    \   '     messages under earlier versions of Perl that do not support this',
    \   '     syntax. The equivalent numeric version should be used instead.',
    \   '',
    \   '         require v5.6.1;     # run time version check',
    \   '         require 5.6.1;      # ditto',
    \   '         require 5.006_001;  # ditto; preferred for backwards compatibility',
    \   '',
    \   '     Otherwise, "require" demands that a library file be included if',
    \   '     it hasn''t already been included. The file is included via the',
    \   '     do-FILE mechanism, which is essentially just a variety of "eval"',
    \   '     with the caveat that lexical variables in the invoking script',
    \   '     will be invisible to the included code. Has semantics similar to',
    \   '     the following subroutine:',
    \   '',
    \   '         sub require {',
    \   '...',
    \ ],
    \ 'reset': [
    \   '    reset EXPR',
    \   '    reset   Generally used in a "continue" block at the end of a loop to',
    \   '     clear variables and reset "??" searches so that they work again.',
    \   '     The expression is interpreted as a list of single characters',
    \   '     (hyphens allowed for ranges). All variables and arrays beginning',
    \   '     with one of those letters are reset to their pristine state. If',
    \   '     the expression is omitted, one-match searches ("?pattern?") are',
    \   '     reset to match again. Resets only variables or searches in the',
    \   '     current package. Always returns 1. Examples:',
    \   '',
    \   '         reset ''X'';          # reset all X variables',
    \   '         reset ''a-z'';        # reset lower case variables',
    \   '         reset;              # just reset ?one-time? searches',
    \   '',
    \   '     Resetting "A-Z" is not recommended because you''ll wipe out your',
    \   '     @ARGV and @INC arrays and your %ENV hash. Resets only package',
    \   '     variables--lexical variables are unaffected, but they clean',
    \   '     themselves up on scope exit anyway, so you''ll probably want to',
    \   '     use them instead. See "my".',
    \ ],
    \ 'return': [
    \   '    return EXPR',
    \   '    return  Returns from a subroutine, "eval", or "do FILE" with the value',
    \   '     given in EXPR. Evaluation of EXPR may be in list, scalar, or',
    \   '     void context, depending on how the return value will be used,',
    \   '     and the context may vary from one execution to the next (see',
    \   '     "wantarray"). If no EXPR is given, returns an empty list in list',
    \   '     context, the undefined value in scalar context, and (of course)',
    \   '     nothing at all in a void context.',
    \   '',
    \   '     (Note that in the absence of an explicit "return", a subroutine,',
    \   '     eval, or do FILE will automatically return the value of the last',
    \   '     expression evaluated.)',
    \ ],
    \ 'reverse': [
    \   '    reverse LIST',
    \   '     In list context, returns a list value consisting of the elements',
    \   '     of LIST in the opposite order. In scalar context, concatenates',
    \   '     the elements of LIST and returns a string value with all',
    \   '     characters in the opposite order.',
    \   '',
    \   '         print join(", ", reverse "world", "Hello"); # Hello, world',
    \   '',
    \   '         print scalar reverse "dlrow ,", "olleH";    # Hello, world',
    \   '',
    \   '     Used without arguments in scalar context, reverse() reverses $_.',
    \   '',
    \   '         $_ = "dlrow ,olleH";',
    \   '         print reverse;                              # No output, list context',
    \   '         print scalar reverse;                       # Hello, world',
    \   '',
    \   '     This operator is also handy for inverting a hash, although there',
    \   '     are some caveats. If a value is duplicated in the original hash,',
    \   '     only one of those can be represented as a key in the inverted',
    \   '     hash. Also, this has to unwind one hash and build a whole new',
    \   '     one, which may take some time on a large hash, such as from a',
    \   '     DBM file.',
    \   '',
    \   '         %by_name = reverse %by_address;     # Invert the hash',
    \ ],
    \ 'rewinddir': [
    \   '    rewinddir DIRHANDLE',
    \   '     Sets the current position to the beginning of the directory for',
    \   '     the "readdir" routine on DIRHANDLE.',
    \ ],
    \ 'rindex': [
    \   '    rindex STR,SUBSTR,POSITION',
    \   '    rindex STR,SUBSTR',
    \   '     Works just like index() except that it returns the position of',
    \   '     the *last* occurrence of SUBSTR in STR. If POSITION is',
    \   '     specified, returns the last occurrence beginning at or before',
    \   '     that position.',
    \ ],
    \ 'rmdir': [
    \   '    rmdir FILENAME',
    \   '    rmdir   Deletes the directory specified by FILENAME if that directory is',
    \   '     empty. If it succeeds it returns true, otherwise it returns',
    \   '     false and sets $! (errno). If FILENAME is omitted, uses $_.',
    \   '',
    \   '     To remove a directory tree recursively ("rm -rf" on unix) look',
    \   '     at the "rmtree" function of the File::Path module.',
    \ ],
    \ 's': [
    \   '    s///    The substitution operator. See "Regexp Quote-Like Operators" in',
    \   '     perlop.',
    \ ],
    \ 'scalar': [
    \   '    scalar EXPR',
    \   '     Forces EXPR to be interpreted in scalar context and returns the',
    \   '     value of EXPR.',
    \   '',
    \   '         @counts = ( scalar @a, scalar @b, scalar @c );',
    \   '',
    \   '     There is no equivalent operator to force an expression to be',
    \   '     interpolated in list context because in practice, this is never',
    \   '     needed. If you really wanted to do so, however, you could use',
    \   '     the construction "@{[ (some expression) ]}", but usually a',
    \   '     simple "(some expression)" suffices.',
    \   '',
    \   '     Because "scalar" is unary operator, if you accidentally use for',
    \   '     EXPR a parenthesized list, this behaves as a scalar comma',
    \   '     expression, evaluating all but the last element in void context',
    \   '     and returning the final element evaluated in scalar context.',
    \   '     This is seldom what you want.',
    \   '',
    \   '     The following single statement:',
    \   '',
    \   '             print uc(scalar(&foo,$bar)),$baz;',
    \   '',
    \   '     is the moral equivalent of these two:',
    \   '',
    \   '             &foo;',
    \   '             print(uc($bar),$baz);',
    \   '',
    \   '     See perlop for more details on unary operators and the comma',
    \   '     operator.',
    \ ],
    \ 'seek': [
    \   '    seek FILEHANDLE,POSITION,WHENCE',
    \   '     Sets FILEHANDLE''s position, just like the "fseek" call of',
    \   '     "stdio". FILEHANDLE may be an expression whose value gives the',
    \   '     name of the filehandle. The values for WHENCE are 0 to set the',
    \   '     new position *in bytes* to POSITION, 1 to set it to the current',
    \   '     position plus POSITION, and 2 to set it to EOF plus POSITION',
    \   '     (typically negative). For WHENCE you may use the constants',
    \   '     "SEEK_SET", "SEEK_CUR", and "SEEK_END" (start of the file,',
    \   '     current position, end of the file) from the Fcntl module.',
    \   '     Returns 1 upon success, 0 otherwise.',
    \   '',
    \   '     Note the *in bytes*: even if the filehandle has been set to',
    \   '     operate on characters (for example by using the',
    \   '     ":encoding(utf8)" open layer), tell() will return byte offsets,',
    \   '     not character offsets (because implementing that would render',
    \   '     seek() and tell() rather slow).',
    \   '',
    \   '     If you want to position file for "sysread" or "syswrite", don''t',
    \   '     use "seek"--buffering makes its effect on the file''s system',
    \   '     position unpredictable and non-portable. Use "sysseek" instead.',
    \   '',
    \   '     Due to the rules and rigors of ANSI C, on some systems you have',
    \   '     to do a seek whenever you switch between reading and writing.',
    \   '     Amongst other things, this may have the effect of calling',
    \   '     stdio''s clearerr(3). A WHENCE of 1 ("SEEK_CUR") is useful for',
    \   '     not moving the file position:',
    \   '',
    \   '         seek(TEST,0,1);',
    \   '...',
    \ ],
    \ 'seekdir': [
    \   '    seekdir DIRHANDLE,POS',
    \   '     Sets the current position for the "readdir" routine on',
    \   '     DIRHANDLE. POS must be a value returned by "telldir". "seekdir"',
    \   '     also has the same caveats about possible directory compaction as',
    \   '     the corresponding system library routine.',
    \ ],
    \ 'select': [
    \   '    select FILEHANDLE',
    \   '    select  Returns the currently selected filehandle. If FILEHANDLE is',
    \   '     supplied, sets the new current default filehandle for output.',
    \   '     This has two effects: first, a "write" or a "print" without a',
    \   '     filehandle will default to this FILEHANDLE. Second, references',
    \   '     to variables related to output will refer to this output',
    \   '     channel. For example, if you have to set the top of form format',
    \   '     for more than one output channel, you might do the following:',
    \   '',
    \   '         select(REPORT1);',
    \   '         $^ = ''report1_top'';',
    \   '         select(REPORT2);',
    \   '         $^ = ''report2_top'';',
    \   '',
    \   '     FILEHANDLE may be an expression whose value gives the name of',
    \   '     the actual filehandle. Thus:',
    \   '',
    \   '         $oldfh = select(STDERR); $| = 1; select($oldfh);',
    \   '',
    \   '     Some programmers may prefer to think of filehandles as objects',
    \   '     with methods, preferring to write the last example as:',
    \   '',
    \   '         use IO::Handle;',
    \   '         STDERR->autoflush(1);',
    \   '',
    \   '    select RBITS,WBITS,EBITS,TIMEOUT',
    \   '     This calls the select(2) system call with the bit masks',
    \   '     specified, which can be constructed using "fileno" and "vec",',
    \   '     along these lines:',
    \   '...',
    \ ],
    \ 'semctl': [
    \   '    semctl ID,SEMNUM,CMD,ARG',
    \   '     Calls the System V IPC function "semctl". You''ll probably have',
    \   '     to say',
    \   '',
    \   '         use IPC::SysV;',
    \   '',
    \   '     first to get the correct constant definitions. If CMD is',
    \   '     IPC_STAT or GETALL, then ARG must be a variable that will hold',
    \   '     the returned semid_ds structure or semaphore value array.',
    \   '     Returns like "ioctl": the undefined value for error, ""0 but',
    \   '     true"" for zero, or the actual return value otherwise. The ARG',
    \   '     must consist of a vector of native short integers, which may be',
    \   '     created with "pack("s!",(0)x$nsem)". See also "SysV IPC" in',
    \   '     perlipc, "IPC::SysV", "IPC::Semaphore" documentation.',
    \ ],
    \ 'semget': [
    \   '    semget KEY,NSEMS,FLAGS',
    \   '     Calls the System V IPC function semget. Returns the semaphore',
    \   '     id, or the undefined value if there is an error. See also "SysV',
    \   '     IPC" in perlipc, "IPC::SysV", "IPC::SysV::Semaphore"',
    \   '     documentation.',
    \ ],
    \ 'semop': [
    \   '    semop KEY,OPSTRING',
    \   '     Calls the System V IPC function semop to perform semaphore',
    \   '     operations such as signalling and waiting. OPSTRING must be a',
    \   '     packed array of semop structures. Each semop structure can be',
    \   '     generated with "pack("s!3", $semnum, $semop, $semflag)". The',
    \   '     length of OPSTRING implies the number of semaphore operations.',
    \   '     Returns true if successful, or false if there is an error. As an',
    \   '     example, the following code waits on semaphore $semnum of',
    \   '     semaphore id $semid:',
    \   '',
    \   '         $semop = pack("s!3", $semnum, -1, 0);',
    \   '         die "Semaphore trouble: $!\n" unless semop($semid, $semop);',
    \   '',
    \   '     To signal the semaphore, replace -1 with 1. See also "SysV IPC"',
    \   '     in perlipc, "IPC::SysV", and "IPC::SysV::Semaphore"',
    \   '     documentation.',
    \ ],
    \ 'send': [
    \   '    send SOCKET,MSG,FLAGS,TO',
    \   '    send SOCKET,MSG,FLAGS',
    \   '     Sends a message on a socket. Attempts to send the scalar MSG to',
    \   '     the SOCKET filehandle. Takes the same flags as the system call',
    \   '     of the same name. On unconnected sockets you must specify a',
    \   '     destination to send TO, in which case it does a C "sendto".',
    \   '     Returns the number of characters sent, or the undefined value if',
    \   '     there is an error. The C system call sendmsg(2) is currently',
    \   '     unimplemented. See "UDP: Message Passing" in perlipc for',
    \   '     examples.',
    \   '',
    \   '     Note the *characters*: depending on the status of the socket,',
    \   '     either (8-bit) bytes or characters are sent. By default all',
    \   '     sockets operate on bytes, but for example if the socket has been',
    \   '     changed using binmode() to operate with the ":encoding(utf8)"',
    \   '     I/O layer (see "open", or the "open" pragma, open), the I/O will',
    \   '     operate on UTF-8 encoded Unicode characters, not bytes.',
    \   '     Similarly for the ":encoding" pragma: in that case pretty much',
    \   '     any characters can be sent.',
    \ ],
    \ 'setgrent': [
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '...',
    \ ],
    \ 'sethostent': [
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '...',
    \ ],
    \ 'setnetent': [
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '...',
    \ ],
    \ 'setpgrp': [
    \   '    setpgrp PID,PGRP',
    \   '     Sets the current process group for the specified PID, 0 for the',
    \   '     current process. Will produce a fatal error if used on a machine',
    \   '     that doesn''t implement POSIX setpgid(2) or BSD setpgrp(2). If',
    \   '     the arguments are omitted, it defaults to "0,0". Note that the',
    \   '     BSD 4.2 version of "setpgrp" does not accept any arguments, so',
    \   '     only "setpgrp(0,0)" is portable. See also "POSIX::setsid()".',
    \ ],
    \ 'setpriority': [
    \   '    setpriority WHICH,WHO,PRIORITY',
    \   '     Sets the current priority for a process, a process group, or a',
    \   '     user. (See setpriority(2).) Will produce a fatal error if used',
    \   '     on a machine that doesn''t implement setpriority(2).',
    \ ],
    \ 'setprotoent': [
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '...',
    \ ],
    \ 'setpwent': [
    \   '    setpwent',
    \   '    setgrent',
    \   '    sethostent STAYOPEN',
    \   '    setnetent STAYOPEN',
    \   '    setprotoent STAYOPEN',
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '...',
    \ ],
    \ 'setservent': [
    \   '    setservent STAYOPEN',
    \   '    endpwent',
    \   '    endgrent',
    \   '    endhostent',
    \   '    endnetent',
    \   '    endprotoent',
    \   '    endservent',
    \   '     These routines perform the same functions as their counterparts',
    \   '     in the system library. In list context, the return values from',
    \   '     the various get routines are as follows:',
    \   '',
    \   '         ($name,$passwd,$uid,$gid,',
    \   '            $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*',
    \   '         ($name,$passwd,$gid,$members) = getgr*',
    \   '         ($name,$aliases,$addrtype,$length,@addrs) = gethost*',
    \   '         ($name,$aliases,$addrtype,$net) = getnet*',
    \   '         ($name,$aliases,$proto) = getproto*',
    \   '         ($name,$aliases,$port,$proto) = getserv*',
    \   '',
    \   '     (If the entry doesn''t exist you get a null list.)',
    \   '',
    \   '     The exact meaning of the $gcos field varies but it usually',
    \   '     contains the real name of the user (as opposed to the login',
    \   '     name) and other information pertaining to the user. Beware,',
    \   '     however, that in many system users are able to change this',
    \   '     information and therefore it cannot be trusted and therefore the',
    \   '     $gcos is tainted (see perlsec). The $passwd and $shell, user''s',
    \   '     encrypted password and login shell, are also tainted, because of',
    \   '     the same reason.',
    \   '...',
    \ ],
    \ 'setsockopt': [
    \   '    setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL',
    \   '     Sets the socket option requested. Returns undefined if there is',
    \   '     an error. Use integer constants provided by the "Socket" module',
    \   '     for LEVEL and OPNAME. Values for LEVEL can also be obtained from',
    \   '     getprotobyname. OPTVAL might either be a packed string or an',
    \   '     integer. An integer OPTVAL is shorthand for pack("i", OPTVAL).',
    \   '',
    \   '     An example disabling the Nagle''s algorithm for a socket:',
    \   '',
    \   '         use Socket qw(IPPROTO_TCP TCP_NODELAY);',
    \   '         setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);',
    \ ],
    \ 'shift': [
    \   '    shift ARRAY',
    \   '    shift   Shifts the first value of the array off and returns it,',
    \   '     shortening the array by 1 and moving everything down. If there',
    \   '     are no elements in the array, returns the undefined value. If',
    \   '     ARRAY is omitted, shifts the @_ array within the lexical scope',
    \   '     of subroutines and formats, and the @ARGV array outside of a',
    \   '     subroutine and also within the lexical scopes established by the',
    \   '     "eval STRING", "BEGIN {}", "INIT {}", "CHECK {}", "UNITCHECK {}"',
    \   '     and "END {}" constructs.',
    \   '',
    \   '     See also "unshift", "push", and "pop". "shift" and "unshift" do',
    \   '     the same thing to the left end of an array that "pop" and "push"',
    \   '     do to the right end.',
    \ ],
    \ 'shmctl': [
    \   '    shmctl ID,CMD,ARG',
    \   '     Calls the System V IPC function shmctl. You''ll probably have to',
    \   '     say',
    \   '',
    \   '         use IPC::SysV;',
    \   '',
    \   '     first to get the correct constant definitions. If CMD is',
    \   '     "IPC_STAT", then ARG must be a variable that will hold the',
    \   '     returned "shmid_ds" structure. Returns like ioctl: the undefined',
    \   '     value for error, "0 but true" for zero, or the actual return',
    \   '     value otherwise. See also "SysV IPC" in perlipc and "IPC::SysV"',
    \   '     documentation.',
    \ ],
    \ 'shmget': [
    \   '    shmget KEY,SIZE,FLAGS',
    \   '     Calls the System V IPC function shmget. Returns the shared',
    \   '     memory segment id, or the undefined value if there is an error.',
    \   '     See also "SysV IPC" in perlipc and "IPC::SysV" documentation.',
    \ ],
    \ 'shmread': [
    \   '    shmread ID,VAR,POS,SIZE',
    \ ],
    \ 'shmwrite': [
    \   '    shmwrite ID,STRING,POS,SIZE',
    \   '     Reads or writes the System V shared memory segment ID starting',
    \   '     at position POS for size SIZE by attaching to it, copying',
    \   '     in/out, and detaching from it. When reading, VAR must be a',
    \   '     variable that will hold the data read. When writing, if STRING',
    \   '     is too long, only SIZE bytes are used; if STRING is too short,',
    \   '     nulls are written to fill out SIZE bytes. Return true if',
    \   '     successful, or false if there is an error. shmread() taints the',
    \   '     variable. See also "SysV IPC" in perlipc, "IPC::SysV"',
    \   '     documentation, and the "IPC::Shareable" module from CPAN.',
    \ ],
    \ 'shutdown': [
    \   '    shutdown SOCKET,HOW',
    \   '     Shuts down a socket connection in the manner indicated by HOW,',
    \   '     which has the same interpretation as in the system call of the',
    \   '     same name.',
    \   '',
    \   '         shutdown(SOCKET, 0);    # I/we have stopped reading data',
    \   '         shutdown(SOCKET, 1);    # I/we have stopped writing data',
    \   '         shutdown(SOCKET, 2);    # I/we have stopped using this socket',
    \   '',
    \   '     This is useful with sockets when you want to tell the other side',
    \   '     you''re done writing but not done reading, or vice versa. It''s',
    \   '     also a more insistent form of close because it also disables the',
    \   '     file descriptor in any forked copies in other processes.',
    \   '',
    \   '     Returns 1 for success. In the case of error, returns "undef" if',
    \   '     the first argument is not a valid filehandle, or returns 0 and',
    \   '     sets $! for any other failure.',
    \ ],
    \ 'sin': [
    \   '    sin EXPR',
    \   '    sin     Returns the sine of EXPR (expressed in radians). If EXPR is',
    \   '     omitted, returns sine of $_.',
    \   '',
    \   '     For the inverse sine operation, you may use the',
    \   '     "Math::Trig::asin" function, or use this relation:',
    \   '',
    \   '         sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }',
    \ ],
    \ 'sleep': [
    \   '    sleep EXPR',
    \   '    sleep   Causes the script to sleep for EXPR seconds, or forever if no',
    \   '     EXPR. Returns the number of seconds actually slept.',
    \   '',
    \   '     May be interrupted if the process receives a signal such as',
    \   '     "SIGALRM".',
    \   '',
    \   '         eval {',
    \   '             local $SIG{ALARM} = sub { die "Alarm!\n" };',
    \   '             sleep;',
    \   '         };',
    \   '         die $@ unless $@ eq "Alarm!\n";',
    \   '',
    \   '     You probably cannot mix "alarm" and "sleep" calls, because',
    \   '     "sleep" is often implemented using "alarm".',
    \   '',
    \   '     On some older systems, it may sleep up to a full second less',
    \   '     than what you requested, depending on how it counts seconds.',
    \   '     Most modern systems always sleep the full amount. They may',
    \   '     appear to sleep longer than that, however, because your process',
    \   '     might not be scheduled right away in a busy multitasking system.',
    \   '',
    \   '     For delays of finer granularity than one second, the Time::HiRes',
    \   '     module (from CPAN, and starting from Perl 5.8 part of the',
    \   '     standard distribution) provides usleep(). You may also use',
    \   '     Perl''s four-argument version of select() leaving the first three',
    \   '     arguments undefined, or you might be able to use the "syscall"',
    \   '     interface to access setitimer(2) if your system supports it. See',
    \   '     perlfaq8 for details.',
    \   '...',
    \ ],
    \ 'socket': [
    \   '    socket SOCKET,DOMAIN,TYPE,PROTOCOL',
    \   '     Opens a socket of the specified kind and attaches it to',
    \   '     filehandle SOCKET. DOMAIN, TYPE, and PROTOCOL are specified the',
    \   '     same as for the system call of the same name. You should "use',
    \   '     Socket" first to get the proper definitions imported. See the',
    \   '     examples in "Sockets: Client/Server Communication" in perlipc.',
    \   '',
    \   '     On systems that support a close-on-exec flag on files, the flag',
    \   '     will be set for the newly opened file descriptor, as determined',
    \   '     by the value of $^F. See "$^F" in perlvar.',
    \ ],
    \ 'socketpair': [
    \   '    socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL',
    \   '     Creates an unnamed pair of sockets in the specified domain, of',
    \   '     the specified type. DOMAIN, TYPE, and PROTOCOL are specified the',
    \   '     same as for the system call of the same name. If unimplemented,',
    \   '     yields a fatal error. Returns true if successful.',
    \   '',
    \   '     On systems that support a close-on-exec flag on files, the flag',
    \   '     will be set for the newly opened file descriptors, as determined',
    \   '     by the value of $^F. See "$^F" in perlvar.',
    \   '',
    \   '     Some systems defined "pipe" in terms of "socketpair", in which a',
    \   '     call to "pipe(Rdr, Wtr)" is essentially:',
    \   '',
    \   '         use Socket;',
    \   '         socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);',
    \   '         shutdown(Rdr, 1);        # no more writing for reader',
    \   '         shutdown(Wtr, 0);        # no more reading for writer',
    \   '',
    \   '     See perlipc for an example of socketpair use. Perl 5.8 and later',
    \   '     will emulate socketpair using IP sockets to localhost if your',
    \   '     system implements sockets but not socketpair.',
    \ ],
    \ 'sort': [
    \   '    sort SUBNAME LIST',
    \   '    sort BLOCK LIST',
    \   '    sort LIST',
    \   '     In list context, this sorts the LIST and returns the sorted list',
    \   '     value. In scalar context, the behaviour of "sort()" is',
    \   '     undefined.',
    \   '',
    \   '     If SUBNAME or BLOCK is omitted, "sort"s in standard string',
    \   '     comparison order. If SUBNAME is specified, it gives the name of',
    \   '     a subroutine that returns an integer less than, equal to, or',
    \   '     greater than 0, depending on how the elements of the list are to',
    \   '     be ordered. (The "<=>" and "cmp" operators are extremely useful',
    \   '     in such routines.) SUBNAME may be a scalar variable name',
    \   '     (unsubscripted), in which case the value provides the name of',
    \   '     (or a reference to) the actual subroutine to use. In place of a',
    \   '     SUBNAME, you can provide a BLOCK as an anonymous, in-line sort',
    \   '     subroutine.',
    \   '',
    \   '     If the subroutine''s prototype is "($$)", the elements to be',
    \   '     compared are passed by reference in @_, as for a normal',
    \   '     subroutine. This is slower than unprototyped subroutines, where',
    \   '     the elements to be compared are passed into the subroutine as',
    \   '     the package global variables $a and $b (see example below). Note',
    \   '     that in the latter case, it is usually counter-productive to',
    \   '     declare $a and $b as lexicals.',
    \   '',
    \   '     The values to be compared are always passed by reference and',
    \   '     should not be modified.',
    \   '...',
    \ ],
    \ 'splice': [
    \   '    splice ARRAY,OFFSET,LENGTH,LIST',
    \   '    splice ARRAY,OFFSET,LENGTH',
    \   '    splice ARRAY,OFFSET',
    \   '    splice ARRAY',
    \   '     Removes the elements designated by OFFSET and LENGTH from an',
    \   '     array, and replaces them with the elements of LIST, if any. In',
    \   '     list context, returns the elements removed from the array. In',
    \   '     scalar context, returns the last element removed, or "undef" if',
    \   '     no elements are removed. The array grows or shrinks as',
    \   '     necessary. If OFFSET is negative then it starts that far from',
    \   '     the end of the array. If LENGTH is omitted, removes everything',
    \   '     from OFFSET onward. If LENGTH is negative, removes the elements',
    \   '     from OFFSET onward except for -LENGTH elements at the end of the',
    \   '     array. If both OFFSET and LENGTH are omitted, removes',
    \   '     everything. If OFFSET is past the end of the array, perl issues',
    \   '     a warning, and splices at the end of the array.',
    \   '',
    \   '     The following equivalences hold (assuming "$[ == 0 and $#a >=',
    \   '     $i" )',
    \   '',
    \   '         push(@a,$x,$y)      splice(@a,@a,0,$x,$y)',
    \   '         pop(@a)             splice(@a,-1)',
    \   '         shift(@a)           splice(@a,0,1)',
    \   '         unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)',
    \   '         $a[$i] = $y         splice(@a,$i,1,$y)',
    \   '',
    \   '     Example, assuming array lengths are passed before arrays:',
    \   '',
    \   '         sub aeq {   # compare two list values',
    \   '...',
    \ ],
    \ 'split': [
    \   '    split /PATTERN/,EXPR,LIMIT',
    \   '    split /PATTERN/,EXPR',
    \   '    split /PATTERN/',
    \   '    split   Splits the string EXPR into a list of strings and returns that',
    \   '     list. By default, empty leading fields are preserved, and empty',
    \   '     trailing ones are deleted. (If all fields are empty, they are',
    \   '     considered to be trailing.)',
    \   '',
    \   '     In scalar context, returns the number of fields found. In scalar',
    \   '     and void context it splits into the @_ array. Use of split in',
    \   '     scalar and void context is deprecated, however, because it',
    \   '     clobbers your subroutine arguments.',
    \   '',
    \   '     If EXPR is omitted, splits the $_ string. If PATTERN is also',
    \   '     omitted, splits on whitespace (after skipping any leading',
    \   '     whitespace). Anything matching PATTERN is taken to be a',
    \   '     delimiter separating the fields. (Note that the delimiter may be',
    \   '     longer than one character.)',
    \   '',
    \   '     If LIMIT is specified and positive, it represents the maximum',
    \   '     number of fields the EXPR will be split into, though the actual',
    \   '     number of fields returned depends on the number of times PATTERN',
    \   '     matches within EXPR. If LIMIT is unspecified or zero, trailing',
    \   '     null fields are stripped (which potential users of "pop" would',
    \   '     do well to remember). If LIMIT is negative, it is treated as if',
    \   '     an arbitrarily large LIMIT had been specified. Note that',
    \   '     splitting an EXPR that evaluates to the empty string always',
    \   '     returns the empty list, regardless of the LIMIT specified.',
    \   '...',
    \ ],
    \ 'sprintf': [
    \   '    sprintf FORMAT, LIST',
    \   '     Returns a string formatted by the usual "printf" conventions of',
    \   '     the C library function "sprintf". See below for more details and',
    \   '     see sprintf(3) or printf(3) on your system for an explanation of',
    \   '     the general principles.',
    \   '',
    \   '     For example:',
    \   '',
    \   '             # Format number with up to 8 leading zeroes',
    \   '             $result = sprintf("%08d", $number);',
    \   '',
    \   '             # Round number to 3 digits after decimal point',
    \   '             $rounded = sprintf("%.3f", $number);',
    \   '',
    \   '     Perl does its own "sprintf" formatting--it emulates the C',
    \   '     function "sprintf", but it doesn''t use it (except for',
    \   '     floating-point numbers, and even then only the standard',
    \   '     modifiers are allowed). As a result, any non-standard extensions',
    \   '     in your local "sprintf" are not available from Perl.',
    \   '',
    \   '     Unlike "printf", "sprintf" does not do what you probably mean',
    \   '     when you pass it an array as your first argument. The array is',
    \   '     given scalar context, and instead of using the 0th element of',
    \   '     the array as the format, Perl will use the count of elements in',
    \   '     the array as the format, which is almost never useful.',
    \   '',
    \   '     Perl''s "sprintf" permits the following universally-known',
    \   '     conversions:',
    \   '...',
    \ ],
    \ 'sqrt': [
    \   '    sqrt EXPR',
    \   '    sqrt    Return the square root of EXPR. If EXPR is omitted, returns',
    \   '     square root of $_. Only works on non-negative operands, unless',
    \   '     you''ve loaded the standard Math::Complex module.',
    \   '',
    \   '         use Math::Complex;',
    \   '         print sqrt(-2);    # prints 1.4142135623731i',
    \ ],
    \ 'srand': [
    \   '    srand EXPR',
    \   '    srand   Sets the random number seed for the "rand" operator.',
    \   '',
    \   '     The point of the function is to "seed" the "rand" function so',
    \   '     that "rand" can produce a different sequence each time you run',
    \   '     your program.',
    \   '',
    \   '     If srand() is not called explicitly, it is called implicitly at',
    \   '     the first use of the "rand" operator. However, this was not the',
    \   '     case in versions of Perl before 5.004, so if your script will',
    \   '     run under older Perl versions, it should call "srand".',
    \   '',
    \   '     Most programs won''t even call srand() at all, except those that',
    \   '     need a cryptographically-strong starting point rather than the',
    \   '     generally acceptable default, which is based on time of day,',
    \   '     process ID, and memory allocation, or the /dev/urandom device,',
    \   '     if available.',
    \   '',
    \   '     You can call srand($seed) with the same $seed to reproduce the',
    \   '     *same* sequence from rand(), but this is usually reserved for',
    \   '     generating predictable results for testing or debugging.',
    \   '     Otherwise, don''t call srand() more than once in your program.',
    \   '',
    \   '     Do not call srand() (i.e. without an argument) more than once in',
    \   '     a script. The internal state of the random number generator',
    \   '     should contain more entropy than can be provided by any seed, so',
    \   '     calling srand() again actually *loses* randomness.',
    \   '',
    \   '     Most implementations of "srand" take an integer and will',
    \   '...',
    \ ],
    \ 'stat': [
    \   '    stat FILEHANDLE',
    \   '    stat EXPR',
    \   '    stat DIRHANDLE',
    \   '    stat    Returns a 13-element list giving the status info for a file,',
    \   '     either the file opened via FILEHANDLE or DIRHANDLE, or named by',
    \   '     EXPR. If EXPR is omitted, it stats $_. Returns a null list if',
    \   '     the stat fails. Typically used as follows:',
    \   '',
    \   '         ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,',
    \   '            $atime,$mtime,$ctime,$blksize,$blocks)',
    \   '                = stat($filename);',
    \   '',
    \   '     Not all fields are supported on all filesystem types. Here are',
    \   '     the meanings of the fields:',
    \   '',
    \   '       0 dev      device number of filesystem',
    \   '       1 ino      inode number',
    \   '       2 mode     file mode  (type and permissions)',
    \   '       3 nlink    number of (hard) links to the file',
    \   '       4 uid      numeric user ID of file''s owner',
    \   '       5 gid      numeric group ID of file''s owner',
    \   '       6 rdev     the device identifier (special files only)',
    \   '       7 size     total size of file, in bytes',
    \   '       8 atime    last access time in seconds since the epoch',
    \   '       9 mtime    last modify time in seconds since the epoch',
    \   '      10 ctime    inode change time in seconds since the epoch (*)',
    \   '      11 blksize  preferred block size for file system I/O',
    \   '      12 blocks   actual number of blocks allocated',
    \   '...',
    \ ],
    \ 'study': [
    \   '    study SCALAR',
    \   '    study   Takes extra time to study SCALAR ($_ if unspecified) in',
    \   '     anticipation of doing many pattern matches on the string before',
    \   '     it is next modified. This may or may not save time, depending on',
    \   '     the nature and number of patterns you are searching on, and on',
    \   '     the distribution of character frequencies in the string to be',
    \   '     searched--you probably want to compare run times with and',
    \   '     without it to see which runs faster. Those loops that scan for',
    \   '     many short constant strings (including the constant parts of',
    \   '     more complex patterns) will benefit most. You may have only one',
    \   '     "study" active at a time--if you study a different scalar the',
    \   '     first is "unstudied". (The way "study" works is this: a linked',
    \   '     list of every character in the string to be searched is made, so',
    \   '     we know, for example, where all the ''k'' characters are. From',
    \   '     each search string, the rarest character is selected, based on',
    \   '     some static frequency tables constructed from some C programs',
    \   '     and English text. Only those places that contain this "rarest"',
    \   '     character are examined.)',
    \   '',
    \   '     For example, here is a loop that inserts index producing entries',
    \   '     before any line containing a certain pattern:',
    \   '',
    \   '         while (<>) {',
    \   '             study;',
    \   '             print ".IX foo\n"       if /\bfoo\b/;',
    \   '             print ".IX bar\n"       if /\bbar\b/;',
    \   '             print ".IX blurfl\n"    if /\bblurfl\b/;',
    \   '             # ...',
    \   '             print;',
    \   '...',
    \ ],
    \ 'sub': [
    \   '    sub NAME BLOCK',
    \   '    sub NAME (PROTO) BLOCK',
    \   '    sub NAME : ATTRS BLOCK',
    \   '    sub NAME (PROTO) : ATTRS BLOCK',
    \   '     This is subroutine definition, not a real function *per se*.',
    \   '     Without a BLOCK it''s just a forward declaration. Without a NAME,',
    \   '     it''s an anonymous function declaration, and does actually return',
    \   '     a value: the CODE ref of the closure you just created.',
    \   '',
    \   '     See perlsub and perlref for details about subroutines and',
    \   '     references, and attributes and Attribute::Handlers for more',
    \   '     information about attributes.',
    \ ],
    \ 'substr': [
    \   '    substr EXPR,OFFSET,LENGTH,REPLACEMENT',
    \   '    substr EXPR,OFFSET,LENGTH',
    \   '    substr EXPR,OFFSET',
    \   '     Extracts a substring out of EXPR and returns it. First character',
    \   '     is at offset 0, or whatever you''ve set $[ to (but don''t do',
    \   '     that). If OFFSET is negative (or more precisely, less than $[),',
    \   '     starts that far from the end of the string. If LENGTH is',
    \   '     omitted, returns everything to the end of the string. If LENGTH',
    \   '     is negative, leaves that many characters off the end of the',
    \   '     string.',
    \   '',
    \   '         my $s = "The black cat climbed the green tree";',
    \   '         my $color  = substr $s, 4, 5;       # black',
    \   '         my $middle = substr $s, 4, -11;     # black cat climbed the',
    \   '         my $end    = substr $s, 14;         # climbed the green tree',
    \   '         my $tail   = substr $s, -4;         # tree',
    \   '         my $z      = substr $s, -4, 2;      # tr',
    \   '',
    \   '     You can use the substr() function as an lvalue, in which case',
    \   '     EXPR must itself be an lvalue. If you assign something shorter',
    \   '     than LENGTH, the string will shrink, and if you assign something',
    \   '     longer than LENGTH, the string will grow to accommodate it. To',
    \   '     keep the string the same length you may need to pad or chop your',
    \   '     value using "sprintf".',
    \   '',
    \   '     If OFFSET and LENGTH specify a substring that is partly outside',
    \   '     the string, only the part within the string is returned. If the',
    \   '     substring is beyond either end of the string, substr() returns',
    \   '     the undefined value and produces a warning. When used as an',
    \   '...',
    \ ],
    \ 'symlink': [
    \   '    symlink OLDFILE,NEWFILE',
    \   '     Creates a new filename symbolically linked to the old filename.',
    \   '     Returns 1 for success, 0 otherwise. On systems that don''t',
    \   '     support symbolic links, produces a fatal error at run time. To',
    \   '     check for that, use eval:',
    \   '',
    \   '         $symlink_exists = eval { symlink("",""); 1 };',
    \ ],
    \ 'syscall': [
    \   '    syscall NUMBER, LIST',
    \   '     Calls the system call specified as the first element of the',
    \   '     list, passing the remaining elements as arguments to the system',
    \   '     call. If unimplemented, produces a fatal error. The arguments',
    \   '     are interpreted as follows: if a given argument is numeric, the',
    \   '     argument is passed as an int. If not, the pointer to the string',
    \   '     value is passed. You are responsible to make sure a string is',
    \   '     pre-extended long enough to receive any result that might be',
    \   '     written into a string. You can''t use a string literal (or other',
    \   '     read-only string) as an argument to "syscall" because Perl has',
    \   '     to assume that any string pointer might be written through. If',
    \   '     your integer arguments are not literals and have never been',
    \   '     interpreted in a numeric context, you may need to add 0 to them',
    \   '     to force them to look like numbers. This emulates the "syswrite"',
    \   '     function (or vice versa):',
    \   '',
    \   '         require ''syscall.ph'';               # may need to run h2ph',
    \   '         $s = "hi there\n";',
    \   '         syscall(&SYS_write, fileno(STDOUT), $s, length $s);',
    \   '',
    \   '     Note that Perl supports passing of up to only 14 arguments to',
    \   '     your system call, which in practice should usually suffice.',
    \   '',
    \   '     Syscall returns whatever value returned by the system call it',
    \   '     calls. If the system call fails, "syscall" returns -1 and sets',
    \   '     $! (errno). Note that some system calls can legitimately return',
    \   '     -1. The proper way to handle such calls is to assign "$!=0;"',
    \   '     before the call and check the value of $! if syscall returns -1.',
    \   '...',
    \ ],
    \ 'sysopen': [
    \   '    sysopen FILEHANDLE,FILENAME,MODE',
    \   '    sysopen FILEHANDLE,FILENAME,MODE,PERMS',
    \   '     Opens the file whose filename is given by FILENAME, and',
    \   '     associates it with FILEHANDLE. If FILEHANDLE is an expression,',
    \   '     its value is used as the name of the real filehandle wanted.',
    \   '     This function calls the underlying operating system''s "open"',
    \   '     function with the parameters FILENAME, MODE, PERMS.',
    \   '',
    \   '     The possible values and flag bits of the MODE parameter are',
    \   '     system-dependent; they are available via the standard module',
    \   '     "Fcntl". See the documentation of your operating system''s "open"',
    \   '     to see which values and flag bits are available. You may combine',
    \   '     several flags using the "|"-operator.',
    \   '',
    \   '     Some of the most common values are "O_RDONLY" for opening the',
    \   '     file in read-only mode, "O_WRONLY" for opening the file in',
    \   '     write-only mode, and "O_RDWR" for opening the file in read-write',
    \   '     mode.',
    \   '',
    \   '     For historical reasons, some values work on almost every system',
    \   '     supported by perl: zero means read-only, one means write-only,',
    \   '     and two means read/write. We know that these values do *not*',
    \   '     work under OS/390 & VM/ESA Unix and on the Macintosh; you',
    \   '     probably don''t want to use them in new code.',
    \   '',
    \   '     If the file named by FILENAME does not exist and the "open" call',
    \   '     creates it (typically because MODE includes the "O_CREAT" flag),',
    \   '     then the value of PERMS specifies the permissions of the newly',
    \   '     created file. If you omit the PERMS argument to "sysopen", Perl',
    \   '...',
    \ ],
    \ 'sysread': [
    \   '    sysread FILEHANDLE,SCALAR,LENGTH,OFFSET',
    \   '    sysread FILEHANDLE,SCALAR,LENGTH',
    \   '     Attempts to read LENGTH bytes of data into variable SCALAR from',
    \   '     the specified FILEHANDLE, using the system call read(2). It',
    \   '     bypasses buffered IO, so mixing this with other kinds of reads,',
    \   '     "print", "write", "seek", "tell", or "eof" can cause confusion',
    \   '     because the perlio or stdio layers usually buffers data. Returns',
    \   '     the number of bytes actually read, 0 at end of file, or undef if',
    \   '     there was an error (in the latter case $! is also set). SCALAR',
    \   '     will be grown or shrunk so that the last byte actually read is',
    \   '     the last byte of the scalar after the read.',
    \   '',
    \   '     An OFFSET may be specified to place the read data at some place',
    \   '     in the string other than the beginning. A negative OFFSET',
    \   '     specifies placement at that many characters counting backwards',
    \   '     from the end of the string. A positive OFFSET greater than the',
    \   '     length of SCALAR results in the string being padded to the',
    \   '     required size with "\0" bytes before the result of the read is',
    \   '     appended.',
    \   '',
    \   '     There is no syseof() function, which is ok, since eof() doesn''t',
    \   '     work very well on device files (like ttys) anyway. Use sysread()',
    \   '     and check for a return value for 0 to decide whether you''re',
    \   '     done.',
    \   '',
    \   '     Note that if the filehandle has been marked as ":utf8" Unicode',
    \   '     characters are read instead of bytes (the LENGTH, OFFSET, and',
    \   '     the return value of sysread() are in Unicode characters). The',
    \   '     ":encoding(...)" layer implicitly introduces the ":utf8" layer.',
    \   '     See "binmode", "open", and the "open" pragma, open.',
    \ ],
    \ 'sysseek': [
    \   '    sysseek FILEHANDLE,POSITION,WHENCE',
    \   '     Sets FILEHANDLE''s system position in bytes using the system call',
    \   '     lseek(2). FILEHANDLE may be an expression whose value gives the',
    \   '     name of the filehandle. The values for WHENCE are 0 to set the',
    \   '     new position to POSITION, 1 to set the it to the current',
    \   '     position plus POSITION, and 2 to set it to EOF plus POSITION',
    \   '     (typically negative).',
    \   '',
    \   '     Note the *in bytes*: even if the filehandle has been set to',
    \   '     operate on characters (for example by using the',
    \   '     ":encoding(utf8)" I/O layer), tell() will return byte offsets,',
    \   '     not character offsets (because implementing that would render',
    \   '     sysseek() very slow).',
    \   '',
    \   '     sysseek() bypasses normal buffered IO, so mixing this with reads',
    \   '     (other than "sysread", for example "<>" or read()) "print",',
    \   '     "write", "seek", "tell", or "eof" may cause confusion.',
    \   '',
    \   '     For WHENCE, you may also use the constants "SEEK_SET",',
    \   '     "SEEK_CUR", and "SEEK_END" (start of the file, current position,',
    \   '     end of the file) from the Fcntl module. Use of the constants is',
    \   '     also more portable than relying on 0, 1, and 2. For example to',
    \   '     define a "systell" function:',
    \   '',
    \   '             use Fcntl ''SEEK_CUR'';',
    \   '             sub systell { sysseek($_[0], 0, SEEK_CUR) }',
    \   '',
    \   '     Returns the new position, or the undefined value on failure. A',
    \   '     position of zero is returned as the string "0 but true"; thus',
    \   '...',
    \ ],
    \ 'system': [
    \   '    system LIST',
    \   '    system PROGRAM LIST',
    \   '     Does exactly the same thing as "exec LIST", except that a fork',
    \   '     is done first, and the parent process waits for the child',
    \   '     process to complete. Note that argument processing varies',
    \   '     depending on the number of arguments. If there is more than one',
    \   '     argument in LIST, or if LIST is an array with more than one',
    \   '     value, starts the program given by the first element of the list',
    \   '     with arguments given by the rest of the list. If there is only',
    \   '     one scalar argument, the argument is checked for shell',
    \   '     metacharacters, and if there are any, the entire argument is',
    \   '     passed to the system''s command shell for parsing (this is',
    \   '     "/bin/sh -c" on Unix platforms, but varies on other platforms).',
    \   '     If there are no shell metacharacters in the argument, it is',
    \   '     split into words and passed directly to "execvp", which is more',
    \   '     efficient.',
    \   '',
    \   '     Beginning with v5.6.0, Perl will attempt to flush all files',
    \   '     opened for output before any operation that may do a fork, but',
    \   '     this may not be supported on some platforms (see perlport). To',
    \   '     be safe, you may need to set $| ($AUTOFLUSH in English) or call',
    \   '     the "autoflush()" method of "IO::Handle" on any open handles.',
    \   '',
    \   '     The return value is the exit status of the program as returned',
    \   '     by the "wait" call. To get the actual exit value, shift right by',
    \   '     eight (see below). See also "exec". This is *not* what you want',
    \   '     to use to capture the output from a command, for that you should',
    \   '     use merely backticks or "qx//", as described in "`STRING`" in',
    \   '     perlop. Return value of -1 indicates a failure to start the',
    \   '...',
    \ ],
    \ 'syswrite': [
    \   '    syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET',
    \   '    syswrite FILEHANDLE,SCALAR,LENGTH',
    \   '    syswrite FILEHANDLE,SCALAR',
    \   '     Attempts to write LENGTH bytes of data from variable SCALAR to',
    \   '     the specified FILEHANDLE, using the system call write(2). If',
    \   '     LENGTH is not specified, writes whole SCALAR. It bypasses',
    \   '     buffered IO, so mixing this with reads (other than sysread()),',
    \   '     "print", "write", "seek", "tell", or "eof" may cause confusion',
    \   '     because the perlio and stdio layers usually buffers data.',
    \   '     Returns the number of bytes actually written, or "undef" if',
    \   '     there was an error (in this case the errno variable $! is also',
    \   '     set). If the LENGTH is greater than the available data in the',
    \   '     SCALAR after the OFFSET, only as much data as is available will',
    \   '     be written.',
    \   '',
    \   '     An OFFSET may be specified to write the data from some part of',
    \   '     the string other than the beginning. A negative OFFSET specifies',
    \   '     writing that many characters counting backwards from the end of',
    \   '     the string. In the case the SCALAR is empty you can use OFFSET',
    \   '     but only zero offset.',
    \   '',
    \   '     Note that if the filehandle has been marked as ":utf8", Unicode',
    \   '     characters are written instead of bytes (the LENGTH, OFFSET, and',
    \   '     the return value of syswrite() are in UTF-8 encoded Unicode',
    \   '     characters). The ":encoding(...)" layer implicitly introduces',
    \   '     the ":utf8" layer. See "binmode", "open", and the "open" pragma,',
    \   '     open.',
    \ ],
    \ 'tell': [
    \   '    tell FILEHANDLE',
    \   '    tell    Returns the current position *in bytes* for FILEHANDLE, or -1 on',
    \   '     error. FILEHANDLE may be an expression whose value gives the',
    \   '     name of the actual filehandle. If FILEHANDLE is omitted, assumes',
    \   '     the file last read.',
    \   '',
    \   '     Note the *in bytes*: even if the filehandle has been set to',
    \   '     operate on characters (for example by using the',
    \   '     ":encoding(utf8)" open layer), tell() will return byte offsets,',
    \   '     not character offsets (because that would render seek() and',
    \   '     tell() rather slow).',
    \   '',
    \   '     The return value of tell() for the standard streams like the',
    \   '     STDIN depends on the operating system: it may return -1 or',
    \   '     something else. tell() on pipes, fifos, and sockets usually',
    \   '     returns -1.',
    \   '',
    \   '     There is no "systell" function. Use "sysseek(FH, 0, 1)" for',
    \   '     that.',
    \   '',
    \   '     Do not use tell() (or other buffered I/O operations) on a file',
    \   '     handle that has been manipulated by sysread(), syswrite() or',
    \   '     sysseek(). Those functions ignore the buffering, while tell()',
    \   '     does not.',
    \ ],
    \ 'telldir': [
    \   '    telldir DIRHANDLE',
    \   '     Returns the current position of the "readdir" routines on',
    \   '     DIRHANDLE. Value may be given to "seekdir" to access a',
    \   '     particular location in a directory. "telldir" has the same',
    \   '     caveats about possible directory compaction as the corresponding',
    \   '     system library routine.',
    \ ],
    \ 'tie': [
    \   '    tie VARIABLE,CLASSNAME,LIST',
    \   '     This function binds a variable to a package class that will',
    \   '     provide the implementation for the variable. VARIABLE is the',
    \   '     name of the variable to be enchanted. CLASSNAME is the name of a',
    \   '     class implementing objects of correct type. Any additional',
    \   '     arguments are passed to the "new" method of the class (meaning',
    \   '     "TIESCALAR", "TIEHANDLE", "TIEARRAY", or "TIEHASH"). Typically',
    \   '     these are arguments such as might be passed to the "dbm_open()"',
    \   '     function of C. The object returned by the "new" method is also',
    \   '     returned by the "tie" function, which would be useful if you',
    \   '     want to access other methods in CLASSNAME.',
    \   '',
    \   '     Note that functions such as "keys" and "values" may return huge',
    \   '     lists when used on large objects, like DBM files. You may prefer',
    \   '     to use the "each" function to iterate over such. Example:',
    \   '',
    \   '         # print out history file offsets',
    \   '         use NDBM_File;',
    \   '         tie(%HIST, ''NDBM_File'', ''/usr/lib/news/history'', 1, 0);',
    \   '         while (($key,$val) = each %HIST) {',
    \   '             print $key, '' = '', unpack(''L'',$val), "\n";',
    \   '         }',
    \   '         untie(%HIST);',
    \   '',
    \   '     A class implementing a hash should have the following methods:',
    \   '',
    \   '         TIEHASH classname, LIST',
    \   '         FETCH this, key',
    \   '         STORE this, key, value',
    \   '...',
    \ ],
    \ 'tied': [
    \   '    tied VARIABLE',
    \   '     Returns a reference to the object underlying VARIABLE (the same',
    \   '     value that was originally returned by the "tie" call that bound',
    \   '     the variable to a package.) Returns the undefined value if',
    \   '     VARIABLE isn''t tied to a package.',
    \ ],
    \ 'time': [
    \   '    time    Returns the number of non-leap seconds since whatever time the',
    \   '     system considers to be the epoch, suitable for feeding to',
    \   '     "gmtime" and "localtime". On most systems the epoch is 00:00:00',
    \   '     UTC, January 1, 1970; a prominent exception being Mac OS Classic',
    \   '     which uses 00:00:00, January 1, 1904 in the current local time',
    \   '     zone for its epoch.',
    \   '',
    \   '     For measuring time in better granularity than one second, you',
    \   '     may use either the Time::HiRes module (from CPAN, and starting',
    \   '     from Perl 5.8 part of the standard distribution), or if you have',
    \   '     gettimeofday(2), you may be able to use the "syscall" interface',
    \   '     of Perl. See perlfaq8 for details.',
    \   '',
    \   '     For date and time processing look at the many related modules on',
    \   '     CPAN. For a comprehensive date and time representation look at',
    \   '     the DateTime module.',
    \ ],
    \ 'times': [
    \   '    times   Returns a four-element list giving the user and system times, in',
    \   '     seconds, for this process and the children of this process.',
    \   '',
    \   '         ($user,$system,$cuser,$csystem) = times;',
    \   '',
    \   '     In scalar context, "times" returns $user.',
    \   '',
    \   '     Note that times for children are included only after they',
    \   '     terminate.',
    \ ],
    \ 'tr': [
    \   '    tr///   The transliteration operator. Same as "y///". See "Quote and',
    \   '     Quote-like Operators" in perlop.',
    \ ],
    \ 'truncate': [
    \   '    truncate FILEHANDLE,LENGTH',
    \   '    truncate EXPR,LENGTH',
    \   '     Truncates the file opened on FILEHANDLE, or named by EXPR, to',
    \   '     the specified length. Produces a fatal error if truncate isn''t',
    \   '     implemented on your system. Returns true if successful, the',
    \   '     undefined value otherwise.',
    \   '',
    \   '     The behavior is undefined if LENGTH is greater than the length',
    \   '     of the file.',
    \   '',
    \   '     The position in the file of FILEHANDLE is left unchanged. You',
    \   '     may want to call seek before writing to the file.',
    \ ],
    \ 'uc': [
    \   '    uc EXPR',
    \   '    uc      Returns an uppercased version of EXPR. This is the internal',
    \   '     function implementing the "\U" escape in double-quoted strings.',
    \   '     Respects current LC_CTYPE locale if "use locale" in force. See',
    \   '     perllocale and perlunicode for more details about locale and',
    \   '     Unicode support. It does not attempt to do titlecase mapping on',
    \   '     initial letters. See "ucfirst" for that.',
    \   '',
    \   '     If EXPR is omitted, uses $_.',
    \ ],
    \ 'ucfirst': [
    \   '    ucfirst EXPR',
    \   '    ucfirst Returns the value of EXPR with the first character in uppercase',
    \   '     (titlecase in Unicode). This is the internal function',
    \   '     implementing the "\u" escape in double-quoted strings. Respects',
    \   '     current LC_CTYPE locale if "use locale" in force. See perllocale',
    \   '     and perlunicode for more details about locale and Unicode',
    \   '     support.',
    \   '',
    \   '     If EXPR is omitted, uses $_.',
    \ ],
    \ 'umask': [
    \   '    umask EXPR',
    \   '    umask   Sets the umask for the process to EXPR and returns the previous',
    \   '     value. If EXPR is omitted, merely returns the current umask.',
    \   '',
    \   '     The Unix permission "rwxr-x---" is represented as three sets of',
    \   '     three bits, or three octal digits: 0750 (the leading 0 indicates',
    \   '     octal and isn''t one of the digits). The "umask" value is such a',
    \   '     number representing disabled permissions bits. The permission',
    \   '     (or "mode") values you pass "mkdir" or "sysopen" are modified by',
    \   '     your umask, so even if you tell "sysopen" to create a file with',
    \   '     permissions 0777, if your umask is 0022 then the file will',
    \   '     actually be created with permissions 0755. If your "umask" were',
    \   '     0027 (group can''t write; others can''t read, write, or execute),',
    \   '     then passing "sysopen" 0666 would create a file with mode 0640',
    \   '     ("0666 &~ 027" is 0640).',
    \   '',
    \   '     Here''s some advice: supply a creation mode of 0666 for regular',
    \   '     files (in "sysopen") and one of 0777 for directories (in',
    \   '     "mkdir") and executable files. This gives users the freedom of',
    \   '     choice: if they want protected files, they might choose process',
    \   '     umasks of 022, 027, or even the particularly antisocial mask of',
    \   '     077. Programs should rarely if ever make policy decisions better',
    \   '     left to the user. The exception to this is when writing files',
    \   '     that should be kept private: mail files, web browser cookies,',
    \   '     *.rhosts* files, and so on.',
    \   '',
    \   '     If umask(2) is not implemented on your system and you are trying',
    \   '     to restrict access for *yourself* (i.e., (EXPR & 0700) > 0),',
    \   '     produces a fatal error at run time. If umask(2) is not',
    \   '...',
    \ ],
    \ 'undef': [
    \   '    undef EXPR',
    \   '    undef   Undefines the value of EXPR, which must be an lvalue. Use only',
    \   '     on a scalar value, an array (using "@"), a hash (using "%"), a',
    \   '     subroutine (using "&"), or a typeglob (using "*"). (Saying',
    \   '     "undef $hash{$key}" will probably not do what you expect on most',
    \   '     predefined variables or DBM list values, so don''t do that; see',
    \   '     delete.) Always returns the undefined value. You can omit the',
    \   '     EXPR, in which case nothing is undefined, but you still get an',
    \   '     undefined value that you could, for instance, return from a',
    \   '     subroutine, assign to a variable or pass as a parameter.',
    \   '     Examples:',
    \   '',
    \   '         undef $foo;',
    \   '         undef $bar{''blurfl''};      # Compare to: delete $bar{''blurfl''};',
    \   '         undef @ary;',
    \   '         undef %hash;',
    \   '         undef &mysub;',
    \   '         undef *xyz;       # destroys $xyz, @xyz, %xyz, &xyz, etc.',
    \   '         return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;',
    \   '         select undef, undef, undef, 0.25;',
    \   '         ($a, $b, undef, $c) = &foo;       # Ignore third value returned',
    \   '',
    \   '     Note that this is a unary operator, not a list operator.',
    \ ],
    \ 'unlink': [
    \   '    unlink LIST',
    \   '    unlink  Deletes a list of files. Returns the number of files',
    \   '     successfully deleted.',
    \   '',
    \   '         $cnt = unlink ''a'', ''b'', ''c'';',
    \   '         unlink @goners;',
    \   '         unlink <*.bak>;',
    \   '',
    \   '     Note: "unlink" will not attempt to delete directories unless you',
    \   '     are superuser and the -U flag is supplied to Perl. Even if these',
    \   '     conditions are met, be warned that unlinking a directory can',
    \   '     inflict damage on your filesystem. Finally, using "unlink" on',
    \   '     directories is not supported on many operating systems. Use',
    \   '     "rmdir" instead.',
    \   '',
    \   '     If LIST is omitted, uses $_.',
    \ ],
    \ 'unpack': [
    \   '    unpack TEMPLATE,EXPR',
    \   '    unpack TEMPLATE',
    \   '     "unpack" does the reverse of "pack": it takes a string and',
    \   '     expands it out into a list of values. (In scalar context, it',
    \   '     returns merely the first value produced.)',
    \   '',
    \   '     If EXPR is omitted, unpacks the $_ string.',
    \   '',
    \   '     The string is broken into chunks described by the TEMPLATE. Each',
    \   '     chunk is converted separately to a value. Typically, either the',
    \   '     string is a result of "pack", or the characters of the string',
    \   '     represent a C structure of some kind.',
    \   '',
    \   '     The TEMPLATE has the same format as in the "pack" function.',
    \   '     Here''s a subroutine that does substring:',
    \   '',
    \   '         sub substr {',
    \   '             my($what,$where,$howmuch) = @_;',
    \   '             unpack("x$where a$howmuch", $what);',
    \   '         }',
    \   '',
    \   '     and then there''s',
    \   '',
    \   '         sub ordinal { unpack("W",$_[0]); } # same as ord()',
    \   '',
    \   '     In addition to fields allowed in pack(), you may prefix a field',
    \   '     with a %<number> to indicate that you want a <number>-bit',
    \   '     checksum of the items instead of the items themselves. Default',
    \   '     is a 16-bit checksum. Checksum is calculated by summing numeric',
    \   '...',
    \ ],
    \ 'unshift': [
    \   '    unshift ARRAY,LIST',
    \   '     Does the opposite of a "shift". Or the opposite of a "push",',
    \   '     depending on how you look at it. Prepends list to the front of',
    \   '     the array, and returns the new number of elements in the array.',
    \   '',
    \   '         unshift(@ARGV, ''-e'') unless $ARGV[0] =~ /^-/;',
    \   '',
    \   '     Note the LIST is prepended whole, not one element at a time, so',
    \   '     the prepended elements stay in the same order. Use "reverse" to',
    \   '     do the reverse.',
    \ ],
    \ 'untie': [
    \   '    untie VARIABLE',
    \   '     Breaks the binding between a variable and a package. (See',
    \   '     "tie".) Has no effect if the variable is not tied.',
    \ ],
    \ 'use': [
    \   '    use Module VERSION LIST',
    \   '    use Module VERSION',
    \   '    use Module LIST',
    \   '    use Module',
    \   '    use VERSION',
    \   '     Imports some semantics into the current package from the named',
    \   '     module, generally by aliasing certain subroutine or variable',
    \   '     names into your package. It is exactly equivalent to',
    \   '',
    \   '         BEGIN { require Module; Module->import( LIST ); }',
    \   '',
    \   '     except that Module *must* be a bareword.',
    \   '',
    \   '     In the peculiar "use VERSION" form, VERSION may be either a',
    \   '     numeric argument such as 5.006, which will be compared to $], or',
    \   '     a literal of the form v5.6.1, which will be compared to $^V (aka',
    \   '     $PERL_VERSION). A fatal error is produced if VERSION is greater',
    \   '     than the version of the current Perl interpreter; Perl will not',
    \   '     attempt to parse the rest of the file. Compare with "require",',
    \   '     which can do a similar check at run time. Symmetrically, "no',
    \   '     VERSION" allows you to specify that you want a version of perl',
    \   '     older than the specified one.',
    \   '',
    \   '     Specifying VERSION as a literal of the form v5.6.1 should',
    \   '     generally be avoided, because it leads to misleading error',
    \   '     messages under earlier versions of Perl (that is, prior to',
    \   '     5.6.0) that do not support this syntax. The equivalent numeric',
    \   '     version should be used instead.',
    \   '...',
    \ ],
    \ 'use ': [
    \   '    use Module VERSION LIST',
    \   '    use Module VERSION',
    \   '    use Module LIST',
    \   '    use Module',
    \   '    use VERSION',
    \   '     Imports some semantics into the current package from the named',
    \   '     module, generally by aliasing certain subroutine or variable',
    \   '     names into your package. It is exactly equivalent to',
    \   '',
    \   '         BEGIN { require Module; Module->import( LIST ); }',
    \   '',
    \   '     except that Module *must* be a bareword.',
    \   '',
    \   '     In the peculiar "use VERSION" form, VERSION may be either a',
    \   '     numeric argument such as 5.006, which will be compared to $], or',
    \   '     a literal of the form v5.6.1, which will be compared to $^V (aka',
    \   '     $PERL_VERSION). A fatal error is produced if VERSION is greater',
    \   '     than the version of the current Perl interpreter; Perl will not',
    \   '     attempt to parse the rest of the file. Compare with "require",',
    \   '     which can do a similar check at run time. Symmetrically, "no',
    \   '     VERSION" allows you to specify that you want a version of perl',
    \   '     older than the specified one.',
    \   '',
    \   '     Specifying VERSION as a literal of the form v5.6.1 should',
    \   '     generally be avoided, because it leads to misleading error',
    \   '     messages under earlier versions of Perl (that is, prior to',
    \   '     5.6.0) that do not support this syntax. The equivalent numeric',
    \   '     version should be used instead.',
    \   '...',
    \ ],
    \ 'utime': [
    \   '    utime LIST',
    \   '     Changes the access and modification times on each file of a list',
    \   '     of files. The first two elements of the list must be the',
    \   '     NUMERICAL access and modification times, in that order. Returns',
    \   '     the number of files successfully changed. The inode change time',
    \   '     of each file is set to the current time. For example, this code',
    \   '     has the same effect as the Unix touch(1) command when the files',
    \   '     *already exist* and belong to the user running the program:',
    \   '',
    \   '         #!/usr/bin/perl',
    \   '         $atime = $mtime = time;',
    \   '         utime $atime, $mtime, @ARGV;',
    \   '',
    \   '     Since perl 5.7.2, if the first two elements of the list are',
    \   '     "undef", then the utime(2) function in the C library will be',
    \   '     called with a null second argument. On most systems, this will',
    \   '     set the file''s access and modification times to the current time',
    \   '     (i.e. equivalent to the example above) and will even work on',
    \   '     other users'' files where you have write permission:',
    \   '',
    \   '         utime undef, undef, @ARGV;',
    \   '',
    \   '     Under NFS this will use the time of the NFS server, not the time',
    \   '     of the local machine. If there is a time synchronization',
    \   '     problem, the NFS server and local machine will have different',
    \   '     times. The Unix touch(1) command will in fact normally use this',
    \   '     form instead of the one shown in the first example.',
    \   '',
    \   '     Note that only passing one of the first two elements as "undef"',
    \   '...',
    \ ],
    \ 'values': [
    \   '    values HASH',
    \   '     Returns a list consisting of all the values of the named hash.',
    \   '     (In a scalar context, returns the number of values.)',
    \   '',
    \   '     The values are returned in an apparently random order. The',
    \   '     actual random order is subject to change in future versions of',
    \   '     perl, but it is guaranteed to be the same order as either the',
    \   '     "keys" or "each" function would produce on the same (unmodified)',
    \   '     hash. Since Perl 5.8.1 the ordering is different even between',
    \   '     different runs of Perl for security reasons (see "Algorithmic',
    \   '     Complexity Attacks" in perlsec).',
    \   '',
    \   '     As a side effect, calling values() resets the HASH''s internal',
    \   '     iterator, see "each". (In particular, calling values() in void',
    \   '     context resets the iterator with no other overhead.)',
    \   '',
    \   '     Note that the values are not copied, which means modifying them',
    \   '     will modify the contents of the hash:',
    \   '',
    \   '         for (values %hash)      { s/foo/bar/g }   # modifies %hash values',
    \   '         for (@hash{keys %hash}) { s/foo/bar/g }   # same',
    \   '',
    \   '     See also "keys", "each", and "sort".',
    \ ],
    \ 'vec': [
    \   '    vec EXPR,OFFSET,BITS',
    \   '     Treats the string in EXPR as a bit vector made up of elements of',
    \   '     width BITS, and returns the value of the element specified by',
    \   '     OFFSET as an unsigned integer. BITS therefore specifies the',
    \   '     number of bits that are reserved for each element in the bit',
    \   '     vector. This must be a power of two from 1 to 32 (or 64, if your',
    \   '     platform supports that).',
    \   '',
    \   '     If BITS is 8, "elements" coincide with bytes of the input',
    \   '     string.',
    \   '',
    \   '     If BITS is 16 or more, bytes of the input string are grouped',
    \   '     into chunks of size BITS/8, and each group is converted to a',
    \   '     number as with pack()/unpack() with big-endian formats "n"/"N"',
    \   '     (and analogously for BITS==64). See "pack" for details.',
    \   '',
    \   '     If bits is 4 or less, the string is broken into bytes, then the',
    \   '     bits of each byte are broken into 8/BITS groups. Bits of a byte',
    \   '     are numbered in a little-endian-ish way, as in 0x01, 0x02, 0x04,',
    \   '     0x08, 0x10, 0x20, 0x40, 0x80. For example, breaking the single',
    \   '     input byte "chr(0x36)" into two groups gives a list "(0x6,',
    \   '     0x3)"; breaking it into 4 groups gives "(0x2, 0x1, 0x3, 0x0)".',
    \   '',
    \   '     "vec" may also be assigned to, in which case parentheses are',
    \   '     needed to give the expression the correct precedence as in',
    \   '',
    \   '         vec($image, $max_x * $x + $y, 8) = 3;',
    \   '',
    \   '     If the selected element is outside the string, the value 0 is',
    \   '...',
    \ ],
    \ 'wait': [
    \   '    wait    Behaves like the wait(2) system call on your system: it waits',
    \   '     for a child process to terminate and returns the pid of the',
    \   '     deceased process, or -1 if there are no child processes. The',
    \   '     status is returned in $? and "${^CHILD_ERROR_NATIVE}". Note that',
    \   '     a return value of -1 could mean that child processes are being',
    \   '     automatically reaped, as described in perlipc.',
    \ ],
    \ 'waitpid': [
    \   '    waitpid PID,FLAGS',
    \   '     Waits for a particular child process to terminate and returns',
    \   '     the pid of the deceased process, or -1 if there is no such child',
    \   '     process. On some systems, a value of 0 indicates that there are',
    \   '     processes still running. The status is returned in $? and',
    \   '     "${^CHILD_ERROR_NATIVE}". If you say',
    \   '',
    \   '         use POSIX ":sys_wait_h";',
    \   '         #...',
    \   '         do {',
    \   '             $kid = waitpid(-1, WNOHANG);',
    \   '         } while $kid > 0;',
    \   '',
    \   '     then you can do a non-blocking wait for all pending zombie',
    \   '     processes. Non-blocking wait is available on machines supporting',
    \   '     either the waitpid(2) or wait4(2) system calls. However, waiting',
    \   '     for a particular pid with FLAGS of 0 is implemented everywhere.',
    \   '     (Perl emulates the system call by remembering the status values',
    \   '     of processes that have exited but have not been harvested by the',
    \   '     Perl script yet.)',
    \   '',
    \   '     Note that on some systems, a return value of -1 could mean that',
    \   '     child processes are being automatically reaped. See perlipc for',
    \   '     details, and for other examples.',
    \ ],
    \ 'wantarray': [
    \   '    wantarray',
    \   '     Returns true if the context of the currently executing',
    \   '     subroutine or "eval" is looking for a list value. Returns false',
    \   '     if the context is looking for a scalar. Returns the undefined',
    \   '     value if the context is looking for no value (void context).',
    \   '',
    \   '         return unless defined wantarray;    # don''t bother doing more',
    \   '         my @a = complex_calculation();',
    \   '         return wantarray ? @a : "@a";',
    \   '',
    \   '     "wantarray()"''s result is unspecified in the top level of a',
    \   '     file, in a "BEGIN", "UNITCHECK", "CHECK", "INIT" or "END" block,',
    \   '     or in a "DESTROY" method.',
    \   '',
    \   '     This function should have been named wantlist() instead.',
    \ ],
    \ 'warn': [
    \   '    warn LIST',
    \   '     Prints the value of LIST to STDERR. If the last element of LIST',
    \   '     does not end in a newline, it appends the same file/line number',
    \   '     text as "die" does.',
    \   '',
    \   '     If LIST is empty and $@ already contains a value (typically from',
    \   '     a previous eval) that value is used after appending',
    \   '     "\t...caught" to $@. This is useful for staying almost, but not',
    \   '     entirely similar to "die".',
    \   '',
    \   '     If $@ is empty then the string "Warning: Something''s wrong" is',
    \   '     used.',
    \   '',
    \   '     No message is printed if there is a $SIG{__WARN__} handler',
    \   '     installed. It is the handler''s responsibility to deal with the',
    \   '     message as it sees fit (like, for instance, converting it into a',
    \   '     "die"). Most handlers must therefore make arrangements to',
    \   '     actually display the warnings that they are not prepared to deal',
    \   '     with, by calling "warn" again in the handler. Note that this is',
    \   '     quite safe and will not produce an endless loop, since',
    \   '     "__WARN__" hooks are not called from inside one.',
    \   '',
    \   '     You will find this behavior is slightly different from that of',
    \   '     $SIG{__DIE__} handlers (which don''t suppress the error text, but',
    \   '     can instead call "die" again to change it).',
    \   '',
    \   '     Using a "__WARN__" handler provides a powerful way to silence',
    \   '     all warnings (even the so-called mandatory ones). An example:',
    \   '...',
    \ ],
    \ 'write': [
    \   '    write FILEHANDLE',
    \   '    write EXPR',
    \   '    write   Writes a formatted record (possibly multi-line) to the specified',
    \   '     FILEHANDLE, using the format associated with that file. By',
    \   '     default the format for a file is the one having the same name as',
    \   '     the filehandle, but the format for the current output channel',
    \   '     (see the "select" function) may be set explicitly by assigning',
    \   '     the name of the format to the $~ variable.',
    \   '',
    \   '     Top of form processing is handled automatically: if there is',
    \   '     insufficient room on the current page for the formatted record,',
    \   '     the page is advanced by writing a form feed, a special',
    \   '     top-of-page format is used to format the new page header, and',
    \   '     then the record is written. By default the top-of-page format is',
    \   '     the name of the filehandle with "_TOP" appended, but it may be',
    \   '     dynamically set to the format of your choice by assigning the',
    \   '     name to the $^ variable while the filehandle is selected. The',
    \   '     number of lines remaining on the current page is in variable $-,',
    \   '     which can be set to 0 to force a new page.',
    \   '',
    \   '     If FILEHANDLE is unspecified, output goes to the current default',
    \   '     output channel, which starts out as STDOUT but may be changed by',
    \   '     the "select" operator. If the FILEHANDLE is an EXPR, then the',
    \   '     expression is evaluated and the resulting string is used to look',
    \   '     up the name of the FILEHANDLE at run time. For more on formats,',
    \   '     see perlform.',
    \   '',
    \   '     Note that write is *not* the opposite of "read". Unfortunately.',
    \ ],
    \ 'y': [
    \   '    y///    The transliteration operator. Same as "tr///". See "Quote and',
    \   '     Quote-like Operators" in perlop.',
    \ ],
    \ } " }}}2

    " Perl Variables. {{{2
    let g:TagmaTipsSettings['perl']['vars'] = {
    \ } " }}}2

endfunction " }}}1

" Restore the saved compatibility options.
let &cpo = s:cpo_save
unlet s:cpo_save
